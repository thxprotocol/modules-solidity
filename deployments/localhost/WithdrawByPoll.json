{
  "address": "0x76aBe9ec9b15947ba1Ca910695B8b6CffeD8E6CA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "WithdrawPollFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "WithdrawPollRevokedVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "vote",
          "type": "bool"
        }
      ],
      "name": "WithdrawPollVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_withdrawPollApprovalState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_withdrawPollFinalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_withdrawPollRevokeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_agree",
          "type": "bool"
        }
      ],
      "name": "_withdrawPollVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getBeneficiary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9818f9d9b3d6b3fc6ac4fd96a6d20b141044fa925ca20b02ebcac9d6ae66b30b",
  "receipt": {
    "to": null,
    "from": "0x08302CF8648A961c607e3e7Bd7B7Ec3230c2A6c5",
    "contractAddress": "0x76aBe9ec9b15947ba1Ca910695B8b6CffeD8E6CA",
    "transactionIndex": 0,
    "gasUsed": "1091529",
    "logsBloom": "0x
    "blockHash": "0x1d371e1c32042f9c12badcdf7b1505b1ea904fd107725b9f2ed43a8c8b70fb6e",
    "transactionHash": "0x9818f9d9b3d6b3fc6ac4fd96a6d20b141044fa925ca20b02ebcac9d6ae66b30b",
    "logs": [],
    "blockNumber": 41,
    "cumulativeGasUsed": "1091529",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "04c49ca340ef48353ffaff92fa6578f2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"WithdrawFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"WithdrawPollFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"WithdrawPollRevokedVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"WithdrawPollVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_withdrawPollApprovalState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_withdrawPollFinalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_withdrawPollRevokeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_agree\",\"type\":\"bool\"}],\"name\":\"_withdrawPollVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmount(uint256)\":{\"params\":{\"_id\":\"ID of the withdrawPoll to get the reward size for.\"},\"returns\":{\"_0\":\"size of the withdrawal.\"}},\"getBeneficiary(uint256)\":{\"params\":{\"_id\":\"ID of the withdrawPoll to get the beneficiary for.\"},\"returns\":{\"_0\":\"address of the beneficicary of the reward.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/09-WithdrawBypass/WithdrawByPoll.sol\":\"WithdrawByPoll\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2\",\"license\":\"MIT\"},\"contracts/05-Withdraw/WithdrawPoll.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* @title Withdraw Poll\\n* @author Evert Kors <evert@thx.network>\\n* @notice Extends base polls with withdrawal information.\\n* \\n* Dependencies:\\n* TMP-3 Member ID: https://github.com/thxprotocol/modules/issues/2\\n* TMP-5 Token: https://github.com/thxprotocol/modules/issues/5\\n* \\n* Implementations:\\n* TMP-6 Base poll: https://github.com/thxprotocol/modules/issues/6\\n* TMP-7 Withdrawals: https://github.com/thxprotocol/modules/issues/7\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport 'diamond-2/contracts/libraries/LibDiamond.sol';\\nimport '../PoolRegistry/IPoolRegistry.sol';\\n\\n// Implements\\nimport '../util/BasePoll.sol'; // TMP1, TMP 6\\nimport '../TMP/TMP6/LibBasePollStorage.sol';\\nimport '../TMP/TMP7/IWithdrawPoll.sol';\\nimport '../TMP/TMP7/LibWithdrawPollStorage.sol';\\n\\n// depends on\\nimport '../TMP/TMP5/LibTokenStorage.sol';\\nimport '../TMP/TMP2/LibMemberAccessStorage.sol';\\n\\ncontract WithdrawPoll is BasePoll, IWithdrawPoll {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev used to check if poll is a withdrawPoll\\n     */\\n    modifier isWithdraw() {\\n        LibBasePollStorage.BasePollStorage storage bData = baseData();\\n\\n        LibWithdrawPollStorage.WithdrawPollStorage storage wpPollData =\\n            LibWithdrawPollStorage.withdrawPollStorageId(bData.id);\\n        require(wpPollData.beneficiary != 0, 'NOT_WITHDRAW_POLL');\\n        _;\\n    }\\n\\n    /**\\n     * @param _id The ID of the poll that should be finished.\\n     * @dev callback called after poll finalization\\n     */\\n    function onPollFinish(uint256 _id) internal override {\\n        bool approved = _withdrawPollApprovalState();\\n\\n        LibWithdrawPollStorage.WithdrawPollStorage storage wpPollData =\\n            LibWithdrawPollStorage.withdrawPollStorageId(_id);\\n\\n        if (approved) {\\n            LibTokenStorage.TokenStorage storage s = LibTokenStorage.tokenStorage();\\n\\n            IPoolRegistry registry = IPoolRegistry(s.registry);\\n            uint256 fee = wpPollData.amount.mul(registry.feePercentage()).div(10**18);\\n            if (fee > 0) {\\n                // When balance is insufficient, safeTransfer will fail\\n                // according to its design.\\n                s.token.safeTransfer(registry.feeCollector(), fee);\\n                // Skip this check for pools with 0 balance, since these\\n                // might have connected an TokenUnlimitedAccount.\\n                if (s.balance != 0 && s.balance >= fee) {\\n                    s.balance = s.balance.sub(fee);\\n                }\\n                emit WithdrawFeeCollected(fee);\\n            }\\n\\n            address benef = LibMemberAccessStorage.memberStorage().memberToAddress[wpPollData.beneficiary];\\n            if (wpPollData.amount > 0) {\\n                s.token.safeTransfer(benef, wpPollData.amount);\\n                if (s.balance != 0 && s.balance >= wpPollData.amount) {\\n                    s.balance = s.balance.sub(wpPollData.amount);\\n                }\\n                emit Withdrawn(_id, benef, wpPollData.amount);\\n            }\\n        }\\n\\n        emit WithdrawPollFinalized(_id, approved);\\n        delete wpPollData.beneficiary;\\n        delete wpPollData.amount;\\n    }\\n\\n    /**\\n     * @param _voter Address of the manager account that casts the vote.\\n     * @dev Only managers can vote for withdrawPolls.\\n     */\\n    function voteValidate(address _voter) internal view override {\\n        require(_isManager(_voter), 'NO_MANAGER');\\n    }\\n\\n    /**\\n     * @param _id ID of the withdrawPoll to get the beneficiary for.\\n     * @return address of the beneficicary of the reward.\\n     */\\n    function getBeneficiary(uint256 _id) external view override returns (uint256) {\\n        return LibWithdrawPollStorage.withdrawPollStorageId(_id).beneficiary;\\n    }\\n\\n    /**\\n     * @param _id ID of the withdrawPoll to get the reward size for.\\n     * @return size of the withdrawal.\\n     */\\n    function getAmount(uint256 _id) external view override returns (uint256) {\\n        return LibWithdrawPollStorage.withdrawPollStorageId(_id).amount;\\n    }\\n\\n    function _withdrawPollVote(bool _agree) external override isWithdraw isSelf {\\n        vote(_agree);\\n        emit WithdrawPollVoted(baseData().id, _relayReceiver(), _agree);\\n    }\\n\\n    function _withdrawPollRevokeVote() external override isWithdraw isSelf {\\n        revokeVote();\\n        emit WithdrawPollRevokedVote(baseData().id, _relayReceiver());\\n    }\\n\\n    function _withdrawPollFinalize() external override isWithdraw isSelf {\\n        finalize();\\n    }\\n\\n    function _withdrawPollApprovalState() public view virtual override isWithdraw isSelf returns (bool) {\\n        LibBasePollStorage.BasePollStorage storage bData = baseData();\\n        return bData.yesCounter > bData.noCounter;\\n    }\\n}\\n\",\"keccak256\":\"0x751361c599ed4a74d121c8ea75056bdedc2144adbf7d2a892a16bf1a99e4b472\",\"license\":\"Apache-2.0\"},\"contracts/09-WithdrawBypass/WithdrawByPoll.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* @title Withdrawals (Bypass poll)\\n* @author Evert Kors <evert@thx.network>\\n* @dev Inherits default withdraw poll, but will always approve it.\\n* \\n* Implementations: \\n* TMP-7 Withdrawals: https://github.com/thxprotocol/modules/issues/7\\n/******************************************************************************/\\n\\nimport '../05-Withdraw/WithdrawPoll.sol';\\n\\ncontract WithdrawByPoll is WithdrawPoll {\\n    function _withdrawPollApprovalState() public view override isWithdraw returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x42d5d79e343d6b612416c1b59cadd7f42bc5eb577819e1b1fae68bc05e5595d1\",\"license\":\"Apache-2.0\"},\"contracts/PoolRegistry/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.1;\\n\\ninterface IPoolRegistry {\\n    function initialize(address _feeCollector, uint256 _feePercentage) external;\\n\\n    function setFeeCollector(address _feeCollector) external;\\n\\n    function setFeePercentage(uint256 _feePercentage) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function feePercentage() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbdbfdbd8e510eb2ea52dfdbef6e443a21ad89d23f81f0a6140085e00f6d7f59b\",\"license\":\"Apache-2.0\"},\"contracts/TMP/RelayReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/GSNRecipient.sol\\n// But kept minimalist.\\ncontract RelayReceiver {\\n    function _relayReceiver() internal pure returns (address payable result) {\\n        // If not call from RelayHub, return original sender\\n        // We need to read 20 bytes (an address) located at array index msg.data.length - 20. In memory, the array\\n        // is prefixed with a 32-byte length value, so we first add 32 to get the memory read index. However, doing\\n        // so would leave the address in the upper 20 bytes of the 32-byte word, which is inconvenient and would\\n        // require bit shifting. We therefore subtract 12 from the read index so the address lands on the lower 20\\n        // bytes. This can always be done due to the 32-byte prefix.\\n\\n        // The final memory read index is msg.data.length - 20 + 32 - 12 = msg.data.length. Using inline assembly is the\\n        // easiest/most-efficient way to perform this operation.\\n\\n        // These fields are not accessible from assembly\\n        bytes memory array = msg.data;\\n        uint256 index = msg.data.length;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n            result := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5cd49efc7d7def18f42011aec51cc7a69b9a93aeaba9f1832c2f5aecc34032e2\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP1/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IAccessControlEvents {\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\\n\",\"keccak256\":\"0x861e728dd47fece4a3be7f9581be8192efa7bdd135ad4c71b977786d09cfe070\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP1/LibAccessStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\n\\nlibrary LibAccessStorage {\\n    // TODO test with conflicting storage (with other pools)\\n    // set storage pointer based upon assigned id (by factory)\\n\\n    bytes32 constant ACCESS_STORAGE_POSITION = keccak256('diamond.standard.access.storage');\\n\\n    struct RoleStorage {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        EnumerableSet.AddressSet minters;\\n        bytes32 adminRole;\\n    }\\n\\n    function roleStorage() internal pure returns (RoleStorage storage rs) {\\n        bytes32 position = ACCESS_STORAGE_POSITION;\\n        assembly {\\n            rs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe22b519d2a254c5744425112a3599cb66e06ce30ebeff00315cb100e372d3514\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP2/LibMemberAccessStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\nlibrary LibMemberAccessStorage {\\n    bytes32 constant MEMBER_ACCESS_STORAGE_POSITION = keccak256('diamond.standard.member.access.storage');\\n\\n    struct MemberStorage {\\n        uint256 memberCounter;\\n        mapping(address => uint256) addressToMember;\\n        mapping(uint256 => address) memberToAddress;\\n    }\\n\\n    function memberStorage() internal pure returns (MemberStorage storage rs) {\\n        bytes32 position = MEMBER_ACCESS_STORAGE_POSITION;\\n        assembly {\\n            rs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x20f2ae8102598623a0bf072a422ca0fa0edca86232d653f7ace0beb88762cc7a\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP5/LibTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary LibTokenStorage {\\n    bytes32 constant TOKEN_STORAGE_POSITION = keccak256('diamond.standard.token.storage');\\n\\n    struct TokenStorage {\\n        address registry;\\n        uint256 balance;\\n        IERC20 token;\\n    }\\n\\n    function tokenStorage() internal pure returns (TokenStorage storage ts) {\\n        bytes32 position = TOKEN_STORAGE_POSITION;\\n        assembly {\\n            ts.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x78993cb009202460a9dd6d83c79bdda965dfc888dd91a8f2cfaf26bbb449f29b\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP6/LibBasePollStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\n/// @dev This Lib is used to create unique storage pointers and store structured data in them.\\nlibrary LibBasePollStorage {\\n    bytes32 constant BASE_STORAGE = keccak256('diamond.contract.assetpool.basepoll');\\n\\n    /**\\n     * @dev Stores the amount of polls created in the diamond.\\n     */\\n    struct BaseStorage {\\n        uint256 pollCounter;\\n    }\\n\\n    /**\\n     * @dev Stores the information of a poll for a given storage pointer.\\n     */\\n    struct BasePollStorage {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 yesCounter;\\n        uint256 noCounter;\\n        uint256 totalVoted;\\n        mapping(address => Vote) votesByAddress;\\n    }\\n    /**\\n     * @dev Stores a vote for a poll in BasePollStorage.votesByAddress.\\n     */\\n    struct Vote {\\n        uint256 time;\\n        uint256 weight;\\n        bool agree;\\n    }\\n\\n    /**\\n     * @param _id The ID of a poll.\\n     * @return storage position for a given poll id\\n     */\\n    function getPosition(uint256 _id) internal pure returns (bytes32) {\\n        return keccak256(abi.encode('diamond.contract.assetpool.basepoll', _id));\\n    }\\n\\n    /**\\n     * @return bs The base storage containing pollCounter of all polls.\\n     */\\n    function baseStorage() internal pure returns (BaseStorage storage bs) {\\n        bytes32 position = BASE_STORAGE;\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @param _pos The storage position of the poll.\\n     * @return bs The BasePollStorage struct storage for a poll its storage position.\\n     */\\n    function basePollStorage(bytes32 _pos) internal pure returns (BasePollStorage storage bs) {\\n        assembly {\\n            bs.slot := _pos\\n        }\\n    }\\n\\n    /**\\n     * @param _id The poll id\\n     * @return bs The BasePollStorage struct storage for a given poll ID.\\n     */\\n    function basePollStorageId(uint256 _id) internal pure returns (BasePollStorage storage bs) {\\n        bytes32 position = getPosition(_id);\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf6a461ca59db0d5227af09886b0e7f9280f119ad25ad78ed553868ff8331696d\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP7/IWithdrawPoll.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWithdrawPoll {\\n    event Withdrawn(uint256 id, address indexed member, uint256 reward);\\n    event WithdrawPollVoted(uint256 id, address indexed member, bool vote);\\n    event WithdrawPollFinalized(uint256 id, bool approved);\\n    event WithdrawPollRevokedVote(uint256 id, address indexed member);\\n    event WithdrawFeeCollected(uint256 fee);\\n\\n    function getBeneficiary(uint256 _id) external view returns (uint256);\\n\\n    function getAmount(uint256 _id) external view returns (uint256);\\n\\n    function _withdrawPollVote(bool _agree) external;\\n\\n    function _withdrawPollRevokeVote() external;\\n\\n    function _withdrawPollFinalize() external;\\n\\n    function _withdrawPollApprovalState() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8f7e546637481b06636cddcfd7d18ac3748d0f92088d5be97f37779e107df699\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP7/LibWithdrawPollStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\nlibrary LibWithdrawPollStorage {\\n    bytes32 constant WITHDRAW_STORAGE = keccak256('diamond.contract.assetpool.withdrawpoll');\\n\\n    struct WithdrawStorage {\\n        uint256 proposeWithdrawPollDuration;\\n    }\\n\\n    function withdrawStorage() internal pure returns (WithdrawStorage storage bs) {\\n        bytes32 position = WITHDRAW_STORAGE;\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n\\n    struct WithdrawPollStorage {\\n        uint256 beneficiary;\\n        uint256 amount;\\n    }\\n\\n    function getPosition(uint256 _id) internal pure returns (bytes32) {\\n        return keccak256(abi.encode('diamond.contract.assetpool.withdrawpoll', _id));\\n    }\\n\\n    function withdrawPollStorage(bytes32 _pos) internal pure returns (WithdrawPollStorage storage bs) {\\n        assembly {\\n            bs.slot := _pos\\n        }\\n    }\\n\\n    function withdrawPollStorageId(uint256 _id) internal pure returns (WithdrawPollStorage storage bs) {\\n        bytes32 position = getPosition(_id);\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8d81c7588e63bcd1185ce628dea063dc31737bfa4684344e188847a81718e250\",\"license\":\"Apache-2.0\"},\"contracts/util/Access.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.7.4;\\n\\n/******************************************************************************\\\\\\n* @title Access\\n* @author Evert Kors <evert@thx.network>\\n* @notice Implement role-based access control.\\n* \\n* @dev\\n* Implementations: \\n* TMP-1 Access Control: https://github.com/thxprotocol/modules/issues/1\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport 'diamond-2/contracts/libraries/LibDiamond.sol';\\n\\n// depends on\\nimport '../TMP/TMP1/IAccessControlEvents.sol';\\nimport '../TMP/TMP1/LibAccessStorage.sol';\\n\\nimport '../TMP/RelayReceiver.sol';\\n\\ncontract Access is RelayReceiver, IAccessControlEvents {\\n    //\\n    // Access control view methods internal\\n    //\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    modifier onlyOwner() {\\n        require(LibDiamond.contractOwner() == _relayReceiver(), 'NOT_OWNER');\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(_hasRole(MANAGER_ROLE, _relayReceiver()), 'NOT_MANAGER');\\n        _;\\n    }\\n\\n    modifier onlyMember() {\\n        require(_hasRole(MEMBER_ROLE, _relayReceiver()), 'NOT_MEMBER');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks if account bears role.\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     * @return if role member storage array contains the given account address.\\n     */\\n    function _hasRole(bytes32 role, address account) internal view virtual returns (bool) {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        return rs.roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Called in initialize methods.\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Called during initialization\\n     * @param role Bytes32 array representing the role.\\n     * @param adminRole Address of the role admin\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        emit RoleAdminChanged(role, rs.roles[role].adminRole, adminRole);\\n        rs.roles[role].adminRole = adminRole;\\n    }\\n\\n    /**\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        if (rs.roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _relayReceiver());\\n        }\\n    }\\n\\n    /**\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        if (rs.roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _relayReceiver());\\n        }\\n    }\\n\\n    //\\n    // Pool roles view methods internal\\n    //\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 internal constant MEMBER_ROLE = keccak256('MEMBER_ROLE');\\n    bytes32 internal constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\\n    bytes32 internal constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n\\n    function _isManager(address _account) internal view returns (bool) {\\n        return _hasRole(MANAGER_ROLE, _account);\\n    }\\n\\n    function _isMember(address _account) internal view returns (bool) {\\n        return _hasRole(MEMBER_ROLE, _account) || _hasRole(MANAGER_ROLE, _account);\\n    }\\n\\n    function _isMinter(address _account) internal view returns (bool) {\\n        return _hasRole(MINTER_ROLE, _account) || _hasRole(MINTER_ROLE, _account);\\n    }\\n\\n    function _getOwner() internal view returns (address) {\\n        return LibDiamond.contractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x52afb553f406724c9d017a204c6ee7f8015659c3607df34d6f65f10d15905075\",\"license\":\"Apache-2.0\"},\"contracts/util/BasePoll.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '../TMP/TMP6/LibBasePollStorage.sol';\\nimport './Access.sol'; // TMP 1\\n\\nabstract contract BasePoll is Access {\\n    using SafeMath for uint256;\\n\\n    modifier isSelf {\\n        require(msg.sender == address(this));\\n        _;\\n    }\\n\\n    function onPollFinish(uint256 _id) internal virtual;\\n\\n    function voteValidate(address _voter) internal virtual;\\n\\n    modifier checkTime() {\\n        LibBasePollStorage.BasePollStorage storage bData = baseData();\\n        require(block.timestamp >= bData.startTime && block.timestamp <= bData.endTime, 'IS_NO_VALID_TIME');\\n        _;\\n    }\\n\\n    /**\\n     * @notice Finalize poll and call onPollFinish callback with result\\n     */\\n    function finalize() internal {\\n        LibBasePollStorage.BasePollStorage storage bData = baseData();\\n        require(block.timestamp >= bData.endTime, 'WRONG_STATE');\\n        onPollFinish(bData.id);\\n        delete bData.id;\\n        delete bData.startTime;\\n        delete bData.endTime;\\n        delete bData.yesCounter;\\n        delete bData.noCounter;\\n        delete bData.totalVoted;\\n        //delete bData.votesByAddress;\\n    }\\n\\n    /**\\n     * @dev callback called after poll finalization\\n     * @param _agree True if user endorses the proposal else False\\n     */\\n    function vote(bool _agree) internal checkTime {\\n        voteValidate(_relayReceiver());\\n        LibBasePollStorage.BasePollStorage storage bData = baseData();\\n\\n        require(bData.votesByAddress[_relayReceiver()].time == 0, 'HAS_VOTED');\\n        uint256 voiceWeight = 1;\\n\\n        if (_agree) {\\n            bData.yesCounter = bData.yesCounter.add(voiceWeight);\\n        } else {\\n            bData.noCounter = bData.noCounter.add(voiceWeight);\\n        }\\n\\n        bData.votesByAddress[_relayReceiver()].time = block.timestamp;\\n        bData.votesByAddress[_relayReceiver()].weight = voiceWeight;\\n        bData.votesByAddress[_relayReceiver()].agree = _agree;\\n\\n        bData.totalVoted = bData.totalVoted.add(1);\\n    }\\n\\n    /**\\n     * @notice Revoke user`s vote\\n     */\\n    function revokeVote() internal checkTime {\\n        LibBasePollStorage.BasePollStorage storage bData = baseData();\\n        address _voter = _relayReceiver();\\n\\n        require(bData.votesByAddress[_voter].time > 0, 'HAS_NOT_VOTED');\\n\\n        uint256 voiceWeight = bData.votesByAddress[_voter].weight;\\n        bool agree = bData.votesByAddress[_voter].agree;\\n\\n        bData.votesByAddress[_voter].time = 0;\\n        bData.votesByAddress[_voter].weight = 0;\\n        bData.votesByAddress[_voter].agree = false;\\n\\n        bData.totalVoted = bData.totalVoted.sub(1);\\n        if (agree) {\\n            bData.yesCounter = bData.yesCounter.sub(voiceWeight);\\n        } else {\\n            bData.noCounter = bData.noCounter.sub(voiceWeight);\\n        }\\n    }\\n\\n    function baseData() internal pure returns (LibBasePollStorage.BasePollStorage storage) {\\n        return LibBasePollStorage.basePollStorage(bps());\\n    }\\n\\n    /**\\n     * @dev This function gets the poll ID of message data that is appended with an address\\n     */\\n    function bps() internal pure returns (bytes32 rt) {\\n        // These fields are not accessible from assembly\\n        bytes memory array = msg.data;\\n        // minus address space\\n        uint256 index = msg.data.length - 20;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            rt := mload(add(array, index))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8495c195bb5a66f7749ecf3efdb2a9fd9f3f723d0cc1fbaa826db151b57e77ed\",\"license\":\"Apache-2.0\"},\"diamond-2/contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x19c92fe16028a8e74a5f1914235b3e7f4e5eafbc5fced9fa345cab5cd4644c0c\",\"license\":\"MIT\"},\"diamond-2/contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* This is gas optimized by reducing storage reads and storage writes.\\n* This code is as complex as it is to reduce gas costs.\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // owner of the contract\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n        _;\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            // get last selectorSlot\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                uint256 selectorInSlotPosition = (_selectorCount % 8) * 32;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    ds.selectorSlots[_selectorCount / 8] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Replace facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            uint256 selectorSlotCount = _selectorCount / 8;\\n            uint256 selectorInSlotIndex = (_selectorCount % 8) - 1;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex * 32));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount / 8;\\n                    oldSelectorInSlotPosition = (oldSelectorCount % 8) * 32;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n                selectorInSlotIndex--;\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex + 1;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x8f7751980297b63c26a4cf8d7830ba82befde6a07b6a179115985c8d04d6b3cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506112c9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063302df083146100675780637bfefd65146100905780637dad9c39146100a55780639980ec86146100af578063b414838f146100c2578063d18faaa8146100d5575b600080fd5b61007a61007536600461114a565b6100dd565b60405161008791906111d4565b60405180910390f35b6100986100ef565b604051610087919061117a565b6100ad61013e565b005b61007a6100bd36600461114a565b610192565b6100ad6100d036600461112a565b6101a7565b6100ad61024f565b60006100e8826102f3565b5492915050565b6000806100fa610306565b9050600061010b82600001546102f3565b80549091506101355760405162461bcd60e51b815260040161012c90611185565b60405180910390fd5b60019250505090565b6000610148610306565b9050600061015982600001546102f3565b805490915061017a5760405162461bcd60e51b815260040161012c90611185565b33301461018657600080fd5b61018e61031d565b5050565b600061019d826102f3565b6001015492915050565b60006101b1610306565b905060006101c282600001546102f3565b80549091506101e35760405162461bcd60e51b815260040161012c90611185565b3330146101ef57600080fd5b6101f8836103a4565b610200610588565b6001600160a01b03167fa9fd0834e2afbba73e314f3cf92c04a694d27ab99e31eb4ce8e51d57f7890d59610232610306565b54604051610242919087906111dd565b60405180910390a2505050565b6000610259610306565b9050600061026a82600001546102f3565b805490915061028b5760405162461bcd60e51b815260040161012c90611185565b33301461029757600080fd5b61029f6105d5565b6102a7610588565b6001600160a01b03167fee64e7a6623d1cff201c83363d0162fe855c5f1b7fc38f48bdb14968a1c8fb576102d9610306565b546040516102e791906111d4565b60405180910390a25050565b6000806102ff8361073d565b9392505050565b6000610318610313610789565b6107d1565b905090565b6000610327610306565b90508060020154421015610370576040805162461bcd60e51b815260206004820152600b60248201526a57524f4e475f535441544560a81b604482015290519081900360640190fd5b805461037b906107d4565b600080825560018201819055600282018190556003820181905560048201819055600590910155565b60006103ae610306565b9050806001015442101580156103c8575080600201544211155b61040c576040805162461bcd60e51b815260206004820152601060248201526f49535f4e4f5f56414c49445f54494d4560801b604482015290519081900360640190fd5b61041c610417610588565b610acd565b6000610426610306565b9050806006016000610436610588565b6001600160a01b031681526020810191909152604001600020541561048e576040805162461bcd60e51b8152602060048201526009602482015268121054d7d593d5115160ba1b604482015290519081900360640190fd5b600183156104af5760038201546104a59082610af5565b60038301556104c4565b60048201546104be9082610af5565b60048301555b428260060160006104d3610588565b6001600160a01b03166001600160a01b031681526020019081526020016000206000018190555080826006016000610509610588565b6001600160a01b03166001600160a01b03168152602001908152602001600020600101819055508382600601600061053f610588565b6001600160a01b031681526020810191909152604001600020600201805460ff1916911515919091179055600582015461057a906001610af5565b826005018190555050505050565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031692915050565b60006105df610306565b9050806001015442101580156105f9575080600201544211155b61063d576040805162461bcd60e51b815260206004820152601060248201526f49535f4e4f5f56414c49445f54494d4560801b604482015290519081900360640190fd5b6000610647610306565b90506000610653610588565b6001600160a01b03811660009081526006840160205260409020549091506106b2576040805162461bcd60e51b815260206004820152600d60248201526c121054d7d393d517d593d51151609a1b604482015290519081900360640190fd5b6001600160a01b0381166000908152600683016020526040812060018082018054600284018054948690559490915560ff198316909355600585015460ff909216916106fd91610b58565b600585015580156107215760038401546107179083610b58565b6003850155610736565b60048401546107309083610b58565b60048501555b5050505050565b6000816040516020018080602001838152602001828103825260278152602001806112436027913960400192505050604051602081830303815290604052805190602001209050919050565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601601319015192915050565b90565b60006107de6100ef565b905060006107eb836102f3565b90508115610a855760006107fd610b9a565b905060008160000160009054906101000a90046001600160a01b0316905060006108ae670de0b6b3a76400006108a8846001600160a01b031663a001ecdd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561086557600080fd5b505afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190611162565b600188015490610bbe565b90610c17565b905080156109a85761093f826001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f257600080fd5b505afa158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a9190611103565b60028501546001600160a01b03169083610c59565b600183015415801590610956575080836001015410155b1561097057600183015461096a9082610b58565b60018401555b7f5e4930f7742bd71d2de1552a88134ec1f7408a0bdf834f9e1b1f35e976b169e08160405161099f91906111d4565b60405180910390a15b60006109b2610cb0565b85546000908152600291909101602052604090205460018601546001600160a01b03909116915015610a8057600185015460028501546109ff916001600160a01b03909116908390610c59565b600184015415801590610a1a57508460010154846001015410155b15610a385760018086015490850154610a3291610b58565b60018501555b806001600160a01b03167fcf7d23a3cbe4e8b36ff82fd1b05b1b17373dc7804b4ebbd6e2356716ef202372888760010154604051610a779291906111ed565b60405180910390a25b505050505b7fa207d5145c3030050ff72fa91f5f37445b6aa4850cf1f03c11c24b5f7dd458338383604051610ab69291906111dd565b60405180910390a160008082556001909101555050565b610ad681610cd4565b610af25760405162461bcd60e51b815260040161012c906111b0565b50565b600082820183811015610b4f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000610b4f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610d00565b7fa716b7cce20ffbe12e5c0af3eb2f57d81251cd975b53428558ae4ad51b4f942590565b600082610bcd57506000610b52565b82820282848281610bda57fe5b0414610b4f5760405162461bcd60e51b81526004018080602001828103825260218152602001806112226021913960400191505060405180910390fd5b6000610b4f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610d97565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610cab908490610dfc565b505050565b7faa97fdeef5de5607974189e6a2429d502dcc32b43d658c3c065d5ca083ee1fab90565b6000610b527f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0883610ead565b60008184841115610d8f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d54578181015183820152602001610d3c565b50505050905090810190601f168015610d815780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183610de65760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610d54578181015183820152602001610d3c565b506000838581610df257fe5b0495945050505050565b6060610e51826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610edb9092919063ffffffff16565b805190915015610cab57808060200190516020811015610e7057600080fd5b5051610cab5760405162461bcd60e51b815260040180806020018281038252602a81526020018061126a602a913960400191505060405180910390fd5b600080610eb8610eea565b6000858152602082905260409020909150610ed39084610f0e565b949350505050565b6060610ed38484600085610f23565b7f6282190449f76f72a9f692e4d8619a03764b7253394788948e36a7a57ba4a00e90565b6000610b4f836001600160a01b03841661107f565b606082471015610f645760405162461bcd60e51b81526004018080602001828103825260268152602001806111fc6026913960400191505060405180910390fd5b610f6d85611097565b610fbe576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610ffd5780518252601f199092019160209182019101610fde565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461105f576040519150601f19603f3d011682016040523d82523d6000602084013e611064565b606091505b509150915061107482828661109d565b979650505050505050565b60009081526001919091016020526040902054151590565b3b151590565b606083156110ac5750816102ff565b8251156110bc5782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315610d54578181015183820152602001610d3c565b600060208284031215611114578081fd5b81516001600160a01b0381168114610b4f578182fd5b60006020828403121561113b578081fd5b81358015158114610b4f578182fd5b60006020828403121561115b578081fd5b5035919050565b600060208284031215611173578081fd5b5051919050565b901515815260200190565b6020808252601190820152701393d517d5d2551211149055d7d413d313607a1b604082015260600190565b6020808252600a90820152692727afa6a0a720a3a2a960b11b604082015260600190565b90815260200190565b9182521515602082015260400190565b91825260208201526040019056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776469616d6f6e642e636f6e74726163742e6173736574706f6f6c2e7769746864726177706f6c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a0d0181b3dac0c06e4cc574e345d99056d73f680b17e0f2501acb55d984866e264736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063302df083146100675780637bfefd65146100905780637dad9c39146100a55780639980ec86146100af578063b414838f146100c2578063d18faaa8146100d5575b600080fd5b61007a61007536600461114a565b6100dd565b60405161008791906111d4565b60405180910390f35b6100986100ef565b604051610087919061117a565b6100ad61013e565b005b61007a6100bd36600461114a565b610192565b6100ad6100d036600461112a565b6101a7565b6100ad61024f565b60006100e8826102f3565b5492915050565b6000806100fa610306565b9050600061010b82600001546102f3565b80549091506101355760405162461bcd60e51b815260040161012c90611185565b60405180910390fd5b60019250505090565b6000610148610306565b9050600061015982600001546102f3565b805490915061017a5760405162461bcd60e51b815260040161012c90611185565b33301461018657600080fd5b61018e61031d565b5050565b600061019d826102f3565b6001015492915050565b60006101b1610306565b905060006101c282600001546102f3565b80549091506101e35760405162461bcd60e51b815260040161012c90611185565b3330146101ef57600080fd5b6101f8836103a4565b610200610588565b6001600160a01b03167fa9fd0834e2afbba73e314f3cf92c04a694d27ab99e31eb4ce8e51d57f7890d59610232610306565b54604051610242919087906111dd565b60405180910390a2505050565b6000610259610306565b9050600061026a82600001546102f3565b805490915061028b5760405162461bcd60e51b815260040161012c90611185565b33301461029757600080fd5b61029f6105d5565b6102a7610588565b6001600160a01b03167fee64e7a6623d1cff201c83363d0162fe855c5f1b7fc38f48bdb14968a1c8fb576102d9610306565b546040516102e791906111d4565b60405180910390a25050565b6000806102ff8361073d565b9392505050565b6000610318610313610789565b6107d1565b905090565b6000610327610306565b90508060020154421015610370576040805162461bcd60e51b815260206004820152600b60248201526a57524f4e475f535441544560a81b604482015290519081900360640190fd5b805461037b906107d4565b600080825560018201819055600282018190556003820181905560048201819055600590910155565b60006103ae610306565b9050806001015442101580156103c8575080600201544211155b61040c576040805162461bcd60e51b815260206004820152601060248201526f49535f4e4f5f56414c49445f54494d4560801b604482015290519081900360640190fd5b61041c610417610588565b610acd565b6000610426610306565b9050806006016000610436610588565b6001600160a01b031681526020810191909152604001600020541561048e576040805162461bcd60e51b8152602060048201526009602482015268121054d7d593d5115160ba1b604482015290519081900360640190fd5b600183156104af5760038201546104a59082610af5565b60038301556104c4565b60048201546104be9082610af5565b60048301555b428260060160006104d3610588565b6001600160a01b03166001600160a01b031681526020019081526020016000206000018190555080826006016000610509610588565b6001600160a01b03166001600160a01b03168152602001908152602001600020600101819055508382600601600061053f610588565b6001600160a01b031681526020810191909152604001600020600201805460ff1916911515919091179055600582015461057a906001610af5565b826005018190555050505050565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031692915050565b60006105df610306565b9050806001015442101580156105f9575080600201544211155b61063d576040805162461bcd60e51b815260206004820152601060248201526f49535f4e4f5f56414c49445f54494d4560801b604482015290519081900360640190fd5b6000610647610306565b90506000610653610588565b6001600160a01b03811660009081526006840160205260409020549091506106b2576040805162461bcd60e51b815260206004820152600d60248201526c121054d7d393d517d593d51151609a1b604482015290519081900360640190fd5b6001600160a01b0381166000908152600683016020526040812060018082018054600284018054948690559490915560ff198316909355600585015460ff909216916106fd91610b58565b600585015580156107215760038401546107179083610b58565b6003850155610736565b60048401546107309083610b58565b60048501555b5050505050565b6000816040516020018080602001838152602001828103825260278152602001806112436027913960400192505050604051602081830303815290604052805190602001209050919050565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601601319015192915050565b90565b60006107de6100ef565b905060006107eb836102f3565b90508115610a855760006107fd610b9a565b905060008160000160009054906101000a90046001600160a01b0316905060006108ae670de0b6b3a76400006108a8846001600160a01b031663a001ecdd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561086557600080fd5b505afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190611162565b600188015490610bbe565b90610c17565b905080156109a85761093f826001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f257600080fd5b505afa158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a9190611103565b60028501546001600160a01b03169083610c59565b600183015415801590610956575080836001015410155b1561097057600183015461096a9082610b58565b60018401555b7f5e4930f7742bd71d2de1552a88134ec1f7408a0bdf834f9e1b1f35e976b169e08160405161099f91906111d4565b60405180910390a15b60006109b2610cb0565b85546000908152600291909101602052604090205460018601546001600160a01b03909116915015610a8057600185015460028501546109ff916001600160a01b03909116908390610c59565b600184015415801590610a1a57508460010154846001015410155b15610a385760018086015490850154610a3291610b58565b60018501555b806001600160a01b03167fcf7d23a3cbe4e8b36ff82fd1b05b1b17373dc7804b4ebbd6e2356716ef202372888760010154604051610a779291906111ed565b60405180910390a25b505050505b7fa207d5145c3030050ff72fa91f5f37445b6aa4850cf1f03c11c24b5f7dd458338383604051610ab69291906111dd565b60405180910390a160008082556001909101555050565b610ad681610cd4565b610af25760405162461bcd60e51b815260040161012c906111b0565b50565b600082820183811015610b4f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000610b4f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610d00565b7fa716b7cce20ffbe12e5c0af3eb2f57d81251cd975b53428558ae4ad51b4f942590565b600082610bcd57506000610b52565b82820282848281610bda57fe5b0414610b4f5760405162461bcd60e51b81526004018080602001828103825260218152602001806112226021913960400191505060405180910390fd5b6000610b4f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610d97565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610cab908490610dfc565b505050565b7faa97fdeef5de5607974189e6a2429d502dcc32b43d658c3c065d5ca083ee1fab90565b6000610b527f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0883610ead565b60008184841115610d8f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d54578181015183820152602001610d3c565b50505050905090810190601f168015610d815780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183610de65760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610d54578181015183820152602001610d3c565b506000838581610df257fe5b0495945050505050565b6060610e51826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610edb9092919063ffffffff16565b805190915015610cab57808060200190516020811015610e7057600080fd5b5051610cab5760405162461bcd60e51b815260040180806020018281038252602a81526020018061126a602a913960400191505060405180910390fd5b600080610eb8610eea565b6000858152602082905260409020909150610ed39084610f0e565b949350505050565b6060610ed38484600085610f23565b7f6282190449f76f72a9f692e4d8619a03764b7253394788948e36a7a57ba4a00e90565b6000610b4f836001600160a01b03841661107f565b606082471015610f645760405162461bcd60e51b81526004018080602001828103825260268152602001806111fc6026913960400191505060405180910390fd5b610f6d85611097565b610fbe576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610ffd5780518252601f199092019160209182019101610fde565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461105f576040519150601f19603f3d011682016040523d82523d6000602084013e611064565b606091505b509150915061107482828661109d565b979650505050505050565b60009081526001919091016020526040902054151590565b3b151590565b606083156110ac5750816102ff565b8251156110bc5782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315610d54578181015183820152602001610d3c565b600060208284031215611114578081fd5b81516001600160a01b0381168114610b4f578182fd5b60006020828403121561113b578081fd5b81358015158114610b4f578182fd5b60006020828403121561115b578081fd5b5035919050565b600060208284031215611173578081fd5b5051919050565b901515815260200190565b6020808252601190820152701393d517d5d2551211149055d7d413d313607a1b604082015260600190565b6020808252600a90820152692727afa6a0a720a3a2a960b11b604082015260600190565b90815260200190565b9182521515602082015260400190565b91825260208201526040019056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776469616d6f6e642e636f6e74726163742e6173736574706f6f6c2e7769746864726177706f6c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a0d0181b3dac0c06e4cc574e345d99056d73f680b17e0f2501acb55d984866e264736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmount(uint256)": {
        "params": {
          "_id": "ID of the withdrawPoll to get the reward size for."
        },
        "returns": {
          "_0": "size of the withdrawal."
        }
      },
      "getBeneficiary(uint256)": {
        "params": {
          "_id": "ID of the withdrawPoll to get the beneficiary for."
        },
        "returns": {
          "_0": "address of the beneficicary of the reward."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}