{
  "address": "0x7Cb8d1EAd6303C079c501e93F3ba28C227cd7000",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "withdrawPollApprovalState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "withdrawPollFinalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "withdrawPollRevokeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_agree",
          "type": "bool"
        }
      ],
      "name": "withdrawPollVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf286efb9291f97d8c122658f26fce3da44b2de8e5387496633db69c0968fa319",
  "receipt": {
    "to": null,
    "from": "0x08302CF8648A961c607e3e7Bd7B7Ec3230c2A6c5",
    "contractAddress": "0x7Cb8d1EAd6303C079c501e93F3ba28C227cd7000",
    "transactionIndex": 0,
    "gasUsed": "418158",
    "logsBloom": "0x
    "blockHash": "0x6851affc791cc7556a550fea0ede1f4de28a439cf3f0ab9b2718fa99655832e7",
    "transactionHash": "0xf286efb9291f97d8c122658f26fce3da44b2de8e5387496633db69c0968fa319",
    "logs": [],
    "blockNumber": 43,
    "cumulativeGasUsed": "418158",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "79977927d6b8ac2cbb53638884e28eac",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawPollApprovalState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawPollFinalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawPollRevokeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_agree\",\"type\":\"bool\"}],\"name\":\"withdrawPollVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/09-WithdrawBypass/WithdrawByPollProxy.sol\":\"WithdrawByPollProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/05-Withdraw/WithdrawPollProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* @title Withdraw Poll Proxy\\n* @author Evert Kors <evert@thx.network>\\n* @notice Supports relayed withdraw poll calls.\\n* \\n* Implementations:\\n* TMP-6 Base poll: https://github.com/thxprotocol/modules/issues/6\\n* TMP-7 Withdrawals: https://github.com/thxprotocol/modules/issues/7\\n/******************************************************************************/\\n\\nimport '../TMP/TMP7/IWithdrawPollProxy.sol';\\nimport '../TMP/TMP6/LibBasePollStorage.sol';\\n\\nimport '../TMP/RelayReceiver.sol';\\n\\ncontract WithdrawPollProxy is IWithdrawPollProxy, RelayReceiver {\\n    function withdrawPollVote(uint256 _id, bool _agree) external override {\\n        bytes32 position = LibBasePollStorage.getPosition(_id);\\n        bytes4 sig = bytes4(keccak256('_withdrawPollVote(bool)'));\\n        bytes memory _call = abi.encodeWithSelector(sig, _agree);\\n\\n        (bool success, bytes memory data) = address(this).call(abi.encodePacked(_call, position, _relayReceiver()));\\n        require(success, string(data));\\n    }\\n\\n    function withdrawPollRevokeVote(uint256 _id) external override {\\n        bytes32 position = LibBasePollStorage.getPosition(_id);\\n        bytes4 sig = bytes4(keccak256('_withdrawPollRevokeVote()'));\\n        bytes memory _call = abi.encodeWithSelector(sig);\\n\\n        (bool success, bytes memory data) = address(this).call(abi.encodePacked(_call, position, _relayReceiver()));\\n        require(success, string(data));\\n    }\\n\\n    function withdrawPollFinalize(uint256 _id) external override {\\n        bytes32 position = LibBasePollStorage.getPosition(_id);\\n        bytes4 sig = bytes4(keccak256('_withdrawPollFinalize()'));\\n        bytes memory _call = abi.encodeWithSelector(sig);\\n\\n        (bool success, bytes memory data) = address(this).call(abi.encodePacked(_call, position, _relayReceiver()));\\n        require(success, string(data));\\n    }\\n\\n    function withdrawPollApprovalState(uint256 _id) external view override returns (bool) {\\n        bytes32 position = LibBasePollStorage.getPosition(_id);\\n        bytes4 sig = bytes4(keccak256('_withdrawPollApprovalState()'));\\n        bytes memory _call = abi.encodeWithSelector(sig);\\n\\n        (bool success, bytes memory data) = address(this).staticcall(abi.encodePacked(_call, position, _relayReceiver()));\\n        require(success, string(data));\\n        return abi.decode(data, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0x19206f41e9006abd34684b41b32f4383ec403118330ed247607635acc7db202f\",\"license\":\"Apache-2.0\"},\"contracts/09-WithdrawBypass/WithdrawByPollProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* @title Withdrawals (Bypass poll)\\n* @author Evert Kors <evert@thx.network>\\n* @dev Inherits default withdraw poll proxy\\n* \\n* Implementations: \\n* TMP-7 Withdrawals: https://github.com/thxprotocol/modules/issues/7\\n/******************************************************************************/\\n\\nimport '../05-Withdraw/WithdrawPollProxy.sol';\\n\\ncontract WithdrawByPollProxy is WithdrawPollProxy {}\\n\",\"keccak256\":\"0x9d030be0a2b8896408037fefdca931a7e632118510f27c3709e2cda371990eae\",\"license\":\"Apache-2.0\"},\"contracts/TMP/RelayReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/GSNRecipient.sol\\n// But kept minimalist.\\ncontract RelayReceiver {\\n    function _relayReceiver() internal pure returns (address payable result) {\\n        // If not call from RelayHub, return original sender\\n        // We need to read 20 bytes (an address) located at array index msg.data.length - 20. In memory, the array\\n        // is prefixed with a 32-byte length value, so we first add 32 to get the memory read index. However, doing\\n        // so would leave the address in the upper 20 bytes of the 32-byte word, which is inconvenient and would\\n        // require bit shifting. We therefore subtract 12 from the read index so the address lands on the lower 20\\n        // bytes. This can always be done due to the 32-byte prefix.\\n\\n        // The final memory read index is msg.data.length - 20 + 32 - 12 = msg.data.length. Using inline assembly is the\\n        // easiest/most-efficient way to perform this operation.\\n\\n        // These fields are not accessible from assembly\\n        bytes memory array = msg.data;\\n        uint256 index = msg.data.length;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n            result := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5cd49efc7d7def18f42011aec51cc7a69b9a93aeaba9f1832c2f5aecc34032e2\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP6/LibBasePollStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\n/// @dev This Lib is used to create unique storage pointers and store structured data in them.\\nlibrary LibBasePollStorage {\\n    bytes32 constant BASE_STORAGE = keccak256('diamond.contract.assetpool.basepoll');\\n\\n    /**\\n     * @dev Stores the amount of polls created in the diamond.\\n     */\\n    struct BaseStorage {\\n        uint256 pollCounter;\\n    }\\n\\n    /**\\n     * @dev Stores the information of a poll for a given storage pointer.\\n     */\\n    struct BasePollStorage {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 yesCounter;\\n        uint256 noCounter;\\n        uint256 totalVoted;\\n        mapping(address => Vote) votesByAddress;\\n    }\\n    /**\\n     * @dev Stores a vote for a poll in BasePollStorage.votesByAddress.\\n     */\\n    struct Vote {\\n        uint256 time;\\n        uint256 weight;\\n        bool agree;\\n    }\\n\\n    /**\\n     * @param _id The ID of a poll.\\n     * @return storage position for a given poll id\\n     */\\n    function getPosition(uint256 _id) internal pure returns (bytes32) {\\n        return keccak256(abi.encode('diamond.contract.assetpool.basepoll', _id));\\n    }\\n\\n    /**\\n     * @return bs The base storage containing pollCounter of all polls.\\n     */\\n    function baseStorage() internal pure returns (BaseStorage storage bs) {\\n        bytes32 position = BASE_STORAGE;\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @param _pos The storage position of the poll.\\n     * @return bs The BasePollStorage struct storage for a poll its storage position.\\n     */\\n    function basePollStorage(bytes32 _pos) internal pure returns (BasePollStorage storage bs) {\\n        assembly {\\n            bs.slot := _pos\\n        }\\n    }\\n\\n    /**\\n     * @param _id The poll id\\n     * @return bs The BasePollStorage struct storage for a given poll ID.\\n     */\\n    function basePollStorageId(uint256 _id) internal pure returns (BasePollStorage storage bs) {\\n        bytes32 position = getPosition(_id);\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf6a461ca59db0d5227af09886b0e7f9280f119ad25ad78ed553868ff8331696d\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP7/IWithdrawPollProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IWithdrawPollProxy {\\n    function withdrawPollVote(uint256 _id, bool _agree) external;\\n\\n    function withdrawPollRevokeVote(uint256 _id) external;\\n\\n    function withdrawPollFinalize(uint256 _id) external;\\n\\n    function withdrawPollApprovalState(uint256 _id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x038ec2833d02ffa3561dc0ea49fc728c2692a9caee5f152f1a39477c1e356e67\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061069a806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631788971814610051578063283f28c31461007a5780634543b9871461008f578063649dccae146100a2575b600080fd5b61006461005f366004610526565b6100b5565b60405161007191906105c2565b60405180910390f35b61008d610088366004610526565b6101d8565b005b61008d61009d366004610526565b6102dc565b61008d6100b036600461053e565b610344565b6000806100c18361046a565b6040805160048152602481019091526020810180516001600160e01b0316637bfefd6560e01b1790529091507f7bfefd655d36ca23c3916d0bd77fe74fbd3ed5f317515b2e5236aee36d706299906000606030838661011e6104b6565b60405160200161013093929190610589565b60408051601f198184030181529082905261014a9161056d565b600060405180830381855afa9150503d8060008114610185576040519150601f19603f3d011682016040523d82523d6000602084013e61018a565b606091505b50915091508181906101b85760405162461bcd60e51b81526004016101af91906105cd565b60405180910390fd5b50808060200190518101906101cd9190610503565b979650505050505050565b60006101e38261046a565b6040805160048152602481019091526020810180516001600160e01b0316631a31f55560e31b1790529091507fd18faaa840a79f1e4b9b058ae7c9ff6e61c00891336c23ac82d3b326438f436590600060603083866102406104b6565b60405160200161025293929190610589565b60408051601f198184030181529082905261026c9161056d565b6000604051808303816000865af19150503d80600081146102a9576040519150601f19603f3d011682016040523d82523d6000602084013e6102ae565b606091505b50915091508181906102d35760405162461bcd60e51b81526004016101af91906105cd565b50505050505050565b60006102e78261046a565b6040805160048152602481019091526020810180516001600160e01b0316637dad9c3960e01b1790529091507f7dad9c397eb20be9605d8083df025b5ac2e53bed5a20e7dae801fa06502589d790600060603083866102406104b6565b600061034f8361046a565b905060007fb414838fe14d2b937b45b9b5df6d6e1aba8526175e8a2d17886b236a6846188690506060818460405160240161038a91906105c2565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050600060603083866103cd6104b6565b6040516020016103df93929190610589565b60408051601f19818403018152908290526103f99161056d565b6000604051808303816000865af19150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b50915091508181906104605760405162461bcd60e51b81526004016101af91906105cd565b5050505050505050565b6000816040516020018080602001838152602001828103825260238152602001806106426023913960400192505050604051602081830303815290604052805190602001209050919050565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031692915050565b600060208284031215610514578081fd5b815161051f81610630565b9392505050565b600060208284031215610537578081fd5b5035919050565b60008060408385031215610550578081fd5b82359150602083013561056281610630565b809150509250929050565b6000825161057f818460208701610600565b9190910192915050565b6000845161059b818460208901610600565b919091019283525060601b6bffffffffffffffffffffffff19166020820152603401919050565b901515815260200190565b60006020825282518060208401526105ec816040850160208701610600565b601f01601f19169190910160400192915050565b60005b8381101561061b578181015183820152602001610603565b8381111561062a576000848401525b50505050565b801515811461063e57600080fd5b5056fe6469616d6f6e642e636f6e74726163742e6173736574706f6f6c2e62617365706f6c6ca2646970667358221220d5e33b63dc35acb56bbf301afe3e0182956dc02dcf3e97e0ac2fde3c157f1b8c64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631788971814610051578063283f28c31461007a5780634543b9871461008f578063649dccae146100a2575b600080fd5b61006461005f366004610526565b6100b5565b60405161007191906105c2565b60405180910390f35b61008d610088366004610526565b6101d8565b005b61008d61009d366004610526565b6102dc565b61008d6100b036600461053e565b610344565b6000806100c18361046a565b6040805160048152602481019091526020810180516001600160e01b0316637bfefd6560e01b1790529091507f7bfefd655d36ca23c3916d0bd77fe74fbd3ed5f317515b2e5236aee36d706299906000606030838661011e6104b6565b60405160200161013093929190610589565b60408051601f198184030181529082905261014a9161056d565b600060405180830381855afa9150503d8060008114610185576040519150601f19603f3d011682016040523d82523d6000602084013e61018a565b606091505b50915091508181906101b85760405162461bcd60e51b81526004016101af91906105cd565b60405180910390fd5b50808060200190518101906101cd9190610503565b979650505050505050565b60006101e38261046a565b6040805160048152602481019091526020810180516001600160e01b0316631a31f55560e31b1790529091507fd18faaa840a79f1e4b9b058ae7c9ff6e61c00891336c23ac82d3b326438f436590600060603083866102406104b6565b60405160200161025293929190610589565b60408051601f198184030181529082905261026c9161056d565b6000604051808303816000865af19150503d80600081146102a9576040519150601f19603f3d011682016040523d82523d6000602084013e6102ae565b606091505b50915091508181906102d35760405162461bcd60e51b81526004016101af91906105cd565b50505050505050565b60006102e78261046a565b6040805160048152602481019091526020810180516001600160e01b0316637dad9c3960e01b1790529091507f7dad9c397eb20be9605d8083df025b5ac2e53bed5a20e7dae801fa06502589d790600060603083866102406104b6565b600061034f8361046a565b905060007fb414838fe14d2b937b45b9b5df6d6e1aba8526175e8a2d17886b236a6846188690506060818460405160240161038a91906105c2565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050600060603083866103cd6104b6565b6040516020016103df93929190610589565b60408051601f19818403018152908290526103f99161056d565b6000604051808303816000865af19150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b50915091508181906104605760405162461bcd60e51b81526004016101af91906105cd565b5050505050505050565b6000816040516020018080602001838152602001828103825260238152602001806106426023913960400192505050604051602081830303815290604052805190602001209050919050565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031692915050565b600060208284031215610514578081fd5b815161051f81610630565b9392505050565b600060208284031215610537578081fd5b5035919050565b60008060408385031215610550578081fd5b82359150602083013561056281610630565b809150509250929050565b6000825161057f818460208701610600565b9190910192915050565b6000845161059b818460208901610600565b919091019283525060601b6bffffffffffffffffffffffff19166020820152603401919050565b901515815260200190565b60006020825282518060208401526105ec816040850160208701610600565b601f01601f19169190910160400192915050565b60005b8381101561061b578181015183820152602001610603565b8381111561062a576000848401525b50505050565b801515811461063e57600080fd5b5056fe6469616d6f6e642e636f6e74726163742e6173736574706f6f6c2e62617365706f6c6ca2646970667358221220d5e33b63dc35acb56bbf301afe3e0182956dc02dcf3e97e0ac2fde3c157f1b8c64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}