{
  "address": "0x6c6E82742e0dD4Bf53008aa5B0FAa18F66B70AA5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_facets",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "deployDefaultPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_facets",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "deployNFTPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setDefaultController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa29e8a41ea6d599e699452c75fc2ee83e09bf4e763eda2fd98569a72ce5e4321",
  "receipt": {
    "to": null,
    "from": "0x90819DA17aF39E9791c29a1Cba8819b1084d775a",
    "contractAddress": "0x6c6E82742e0dD4Bf53008aa5B0FAa18F66B70AA5",
    "transactionIndex": 89,
    "gasUsed": "2534864",
    "logsBloom": "0x
    "blockHash": "0xb0fb84461685b66a861d16e36238ccc4937b6a191dda2af57478913b8e9a3cb9",
    "transactionHash": "0xa29e8a41ea6d599e699452c75fc2ee83e09bf4e763eda2fd98569a72ce5e4321",
    "logs": [
      {
        "transactionIndex": 89,
        "blockNumber": 26432260,
        "transactionHash": "0xa29e8a41ea6d599e699452c75fc2ee83e09bf4e763eda2fd98569a72ce5e4321",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000090819da17af39e9791c29a1cba8819b1084d775a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000006c4408cf99c6d0000000000000000000000000000000000000000000000003a55c55c79bda2b190000000000000000000000000000000000000000000017fa0f997f144c74ac22000000000000000000000000000000000000000000000003a4f011becc4064490000000000000000000000000000000000000000000017fa1005c31d1c0e72f2",
        "logIndex": 182,
        "blockHash": "0xb0fb84461685b66a861d16e36238ccc4937b6a191dda2af57478913b8e9a3cb9"
      }
    ],
    "blockNumber": 26432260,
    "cumulativeGasUsed": "5251769",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a73ca02b79187949751b547c4c755745",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_facets\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deployDefaultPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_facets\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deployNFTPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setDefaultController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployDefaultPool((address,uint8,bytes4[])[],address,address)\":{\"details\":\"Transfers ownership to the controller and initializes access control.\",\"params\":{\"_facets\":\"Pool facets for the factory diamond to deploy.\",\"_registry\":\"Registry address to point the pool to.\"}},\"deployNFTPool((address,uint8,bytes4[])[],address)\":{\"details\":\"Transfers ownership to the controller and initializes access control.\",\"params\":{\"_facets\":\"Pool facets for the factory diamond to deploy.\"}},\"setDefaultController(address)\":{\"params\":{\"_controller\":\"Address of the diamond controller.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployDefaultPool((address,uint8,bytes4[])[],address,address)\":{\"notice\":\"Deploys and stores the reference to an pool based on the current defaultCut.\"},\"deployNFTPool((address,uint8,bytes4[])[],address)\":{\"notice\":\"Deploys and stores the reference to an nft pool based.\"},\"setDefaultController(address)\":{\"notice\":\"Sets the controller for the factory diamond.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/PoolFactory/PoolFactoryFacet.sol\":\"PoolFactoryFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IAccessControlEvents {\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\\n\",\"keccak256\":\"0x1c9d7effc254b0fc221be82d92273f04e17cec4c983b7f0548a5b886bfdefd8a\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IDefaultDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport 'diamond-2/contracts/interfaces/IERC173.sol';\\nimport 'diamond-2/contracts/interfaces/IDiamondLoupe.sol';\\nimport 'diamond-2/contracts/interfaces/IDiamondCut.sol';\\nimport '../modules/AccessControl/interfaces/IAccessControlFacet.sol';\\nimport '../modules/MemberAccess/interfaces/IMemberID.sol';\\nimport '../modules/BasePoll/interfaces/IBasePollProxyFacet.sol';\\nimport '../modules/ERC20/interfaces/IERC20Facet.sol';\\nimport '../modules/ERC721/interfaces/IERC721Facet.sol';\\nimport '../modules/RelayHub/interfaces/IRelayHubFacet.sol';\\nimport '../modules/Withdraw/interfaces/IWithdrawFacet.sol';\\nimport '../modules/Withdraw/interfaces/IWithdrawPollFacet.sol';\\nimport '../modules/Withdraw/interfaces/IWithdrawPollProxyFacet.sol';\\nimport './IAccessControlEvents.sol';\\nimport './IPoolRoles.sol';\\n\\ninterface IDefaultDiamond is\\n    IERC173,\\n    IDiamondLoupe,\\n    IDiamondCut,\\n    IAccessControlFacet,\\n    IAccessControlEvents,\\n    IMemberID,\\n    IPoolRoles,\\n    IERC20Facet,\\n    IERC721Facet,\\n    IBasePollProxyFacet,\\n    IWithdrawFacet,\\n    IWithdrawPollFacet,\\n    IWithdrawPollProxyFacet,\\n    IRelayHubFacet\\n{\\n    function setupMockAccess(bytes32[] memory roles, address[] memory addr) external;\\n}\\n\",\"keccak256\":\"0x6a4be9bfd95c52487cdb50a4b4a719af6933f09f1fd4544832c8159715743af9\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPoolRoles.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IPoolRoles {\\n    function initializeRoles(address _owner) external;\\n\\n    function isMember(address _account) external view returns (bool);\\n\\n    function addMember(address _account) external;\\n\\n    function removeMember(address _account) external;\\n\\n    function isManager(address _account) external view returns (bool);\\n\\n    function addManager(address _account) external;\\n\\n    function removeManager(address _account) external;\\n\\n    function isManagerRoleAdmin(address _account) external view returns (bool);\\n\\n    function isMemberRoleAdmin(address _account) external view returns (bool);\\n\\n    function getOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe2889fb87c96d6070310bc8aeabe05a30183d0af418c8d3e960be35d05eb0ca5\",\"license\":\"Apache-2.0\"},\"contracts/modules/AccessControl/interfaces/IAccessControlFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IAccessControlFacet {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x432205f1c3dc3d2d90b306508e22ff73cc8538c3867b59fe29c48cd5bb9e6117\",\"license\":\"Apache-2.0\"},\"contracts/modules/AccessControl/lib/LibAccessStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\n\\nlibrary LibAccessStorage {\\n    // TODO test with conflicting storage (with other pools)\\n    // set storage pointer based upon assigned id (by factory)\\n\\n    bytes32 constant ACCESS_STORAGE_POSITION = keccak256('diamond.standard.access.storage');\\n\\n    struct RoleStorage {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    function roleStorage() internal pure returns (RoleStorage storage rs) {\\n        bytes32 position = ACCESS_STORAGE_POSITION;\\n        assembly {\\n            rs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b263026cf31b69957c414757a12ec6a3f30eda70155342941039a5864f9283b\",\"license\":\"Apache-2.0\"},\"contracts/modules/BasePoll/interfaces/IBasePollProxyFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport '../lib/LibBasePollStorage.sol';\\n\\ninterface IBasePollProxyFacet {\\n    function getStartTime(uint256 _id) external view returns (uint256);\\n\\n    function getEndTime(uint256 _id) external view returns (uint256);\\n\\n    function getYesCounter(uint256 _id) external view returns (uint256);\\n\\n    function getNoCounter(uint256 _id) external view returns (uint256);\\n\\n    function getTotalVoted(uint256 _id) external view returns (uint256);\\n\\n    function getVoteByAddress(uint256 _id, address _address) external view returns (LibBasePollStorage.Vote memory);\\n}\\n\",\"keccak256\":\"0x451a6b9333d33ee1c60c80405c863beeb9fd24e95ce9385c55f999f18c56b2bc\",\"license\":\"Apache-2.0\"},\"contracts/modules/BasePoll/lib/LibBasePollStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\n/// @dev This Lib is used to create unique storage pointers and store structured data in them.\\nlibrary LibBasePollStorage {\\n    bytes32 constant BASE_STORAGE = keccak256('diamond.contract.assetpool.basepoll');\\n\\n    /**\\n     * @dev Stores the amount of polls created in the diamond.\\n     */\\n    struct BaseStorage {\\n        uint256 pollCounter;\\n    }\\n\\n    /**\\n     * @dev Stores the information of a poll for a given storage pointer.\\n     */\\n    struct BasePollStorage {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 yesCounter;\\n        uint256 noCounter;\\n        uint256 totalVoted;\\n        mapping(address => Vote) votesByAddress;\\n    }\\n    /**\\n     * @dev Stores a vote for a poll in BasePollStorage.votesByAddress.\\n     */\\n    struct Vote {\\n        uint256 time;\\n        uint256 weight;\\n        bool agree;\\n    }\\n\\n    /**\\n     * @param _id The ID of a poll.\\n     * @return storage position for a given poll id\\n     */\\n    function getPosition(uint256 _id) internal pure returns (bytes32) {\\n        return keccak256(abi.encode('diamond.contract.assetpool.basepoll', _id));\\n    }\\n\\n    /**\\n     * @return bs The base storage containing pollCounter of all polls.\\n     */\\n    function baseStorage() internal pure returns (BaseStorage storage bs) {\\n        bytes32 position = BASE_STORAGE;\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @param _pos The storage position of the poll.\\n     * @return bs The BasePollStorage struct storage for a poll its storage position.\\n     */\\n    function basePollStorage(bytes32 _pos) internal pure returns (BasePollStorage storage bs) {\\n        assembly {\\n            bs.slot := _pos\\n        }\\n    }\\n\\n    /**\\n     * @param _id The poll id\\n     * @return bs The BasePollStorage struct storage for a given poll ID.\\n     */\\n    function basePollStorageId(uint256 _id) internal pure returns (BasePollStorage storage bs) {\\n        bytes32 position = getPosition(_id);\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf6a461ca59db0d5227af09886b0e7f9280f119ad25ad78ed553868ff8331696d\",\"license\":\"Apache-2.0\"},\"contracts/modules/ERC20/interfaces/IERC20Facet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IERC20Facet {\\n    event ERC20Updated(address old, address current);\\n    event RegistryUpdated(address old, address current);\\n    event PaymentFeeCollected(uint256 fee);\\n    event Paid(address sender, uint256 amount);\\n    event TransferFeeCollected(uint256 fee);\\n    event TransferredTo(address recipient, uint256 amount);\\n\\n    function setPoolRegistry(address _registry) external;\\n    function getPoolRegistry() external view returns (address);\\n    function setERC20(address _token) external;\\n    function getERC20() external view returns (address);\\n    function getBalance() external view returns (uint256);\\n    function pay(uint256 _amount) external;\\n    function transferToMany(address[] memory _recipients, uint256[] memory _amounts) external; \\n}\\n\",\"keccak256\":\"0xf029ffe551ebea7c65702ca96dad872afbf34a21f9240d72ef4297fbdb7672c2\",\"license\":\"Apache-2.0\"},\"contracts/modules/ERC721/interfaces/IERC721Facet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IERC721Facet {\\n    event ERC721Updated(address old, address current);\\n    event ERC721Minted(address recipient, uint256 tokenId);\\n\\n    function setERC721(address _token) external;\\n\\n    function getERC721() external view returns (address);\\n\\n    function mintFor(address recipient, string memory tokenUri) external;\\n}\\n\",\"keccak256\":\"0xfe31b3cafa640d262f86d4c035637ac3e02f961784d8aecd9740eba522d2ac92\",\"license\":\"Apache-2.0\"},\"contracts/modules/MemberAccess/interfaces/IMemberID.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IMemberID {\\n    event MemberAddressChanged(uint256 indexed memberID, address indexed previousAddress, address indexed newAddress);\\n\\n    function upgradeAddress(address _oldAddress, address _newAddress) external;\\n    function getAddressByMember(uint256 _member) external view returns (address);\\n    function getMemberByAddress(address _address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7f8cd6521c86b5a1ebfa7c55d4bec5a54bd2431602fbfbfd829922097b161f82\",\"license\":\"Apache-2.0\"},\"contracts/modules/PoolFactory/PoolFactoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport 'diamond-2/contracts/libraries/LibDiamond.sol';\\nimport './lib/LibFactoryStorage.sol';\\nimport './interfaces/IPoolFactoryFacet.sol';\\nimport '../../interfaces/IDefaultDiamond.sol';\\nimport '../../utils/RelayDiamond.sol';\\nimport '../../utils/Access.sol';\\n\\ncontract PoolFactoryFacet is IPoolFactoryFacet, Access {\\n    /**\\n     * @notice Sets the controller for the factory diamond.\\n     * @param _controller Address of the diamond controller.\\n     */\\n    function setDefaultController(address _controller) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactoryStorage.s().defaultController = _controller;\\n    }\\n\\n    /**\\n     * @notice Deploys and stores the reference to an pool based on the current defaultCut.\\n     * @dev Transfers ownership to the controller and initializes access control.\\n     * @param _facets Pool facets for the factory diamond to deploy.\\n     * @param _registry Registry address to point the pool to.\\n     */\\n    function deployDefaultPool(\\n        IDiamondCut.FacetCut[] memory _facets,\\n        address _registry,\\n        address _token\\n    ) external override {\\n        require(_registry != address(0), 'NO_REGISTRY');\\n        require(_token != address(0), 'NO_TOKEN');\\n        require(_msgSender() == LibDiamond.diamondStorage().contractOwner, 'NOT_OWNER');\\n\\n        LibFactoryStorage.Data storage s = LibFactoryStorage.s();\\n        RelayDiamond diamond = new RelayDiamond(_facets, address(this));\\n\\n        IDefaultDiamond pool = IDefaultDiamond(address(diamond));\\n        pool.setPoolRegistry(_registry);\\n        pool.setERC20(_token);\\n        pool.transferOwnership(s.defaultController);\\n        pool.initializeRoles(s.defaultController);\\n\\n        emit PoolDeployed(address(diamond));\\n    }\\n\\n    /**\\n     * @notice Deploys and stores the reference to an nft pool based.\\n     * @dev Transfers ownership to the controller and initializes access control.\\n     * @param _facets Pool facets for the factory diamond to deploy.\\n     */\\n    function deployNFTPool(IDiamondCut.FacetCut[] memory _facets, address _token) external override {\\n        require(_msgSender() == LibDiamond.diamondStorage().contractOwner, 'NOT_OWNER');\\n        require(_token != address(0), 'NO_TOKEN');\\n\\n        LibFactoryStorage.Data storage s = LibFactoryStorage.s();\\n        RelayDiamond diamond = new RelayDiamond(_facets, address(this));\\n\\n        IDefaultDiamond pool = IDefaultDiamond(address(diamond));\\n        pool.setERC721(_token);\\n        pool.transferOwnership(s.defaultController);\\n        pool.initializeRoles(s.defaultController);\\n\\n        emit PoolDeployed(address(diamond));\\n    }\\n}\\n\",\"keccak256\":\"0x2bfe04412ec0dfe1c6ef144dac582a672d1312a0ec4aaa3764290b87862e1bc2\",\"license\":\"Apache-2.0\"},\"contracts/modules/PoolFactory/interfaces/IPoolFactoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport 'diamond-2/contracts/interfaces/IDiamondCut.sol';\\n\\ninterface IPoolFactoryFacet {\\n    event PoolDeployed(address pool);\\n    \\n    function setDefaultController(address _controller) external;  \\n    function deployDefaultPool(IDiamondCut.FacetCut[] memory _facets, address _registry, address _token) external;\\n    function deployNFTPool(IDiamondCut.FacetCut[] memory _facets, address _token) external;\\n}\\n\",\"keccak256\":\"0xbb617de518d01cfa1f26bab2346d9354142835f88acd0e8ce9771c8aed0272b9\",\"license\":\"Apache-2.0\"},\"contracts/modules/PoolFactory/lib/LibFactoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport 'diamond-2/contracts/interfaces/IDiamondCut.sol';\\n\\nlibrary LibFactoryStorage {\\n    bytes32 constant FACTORY_STORAGE_POSITION = keccak256('diamond.standard.poolfactory.storage');\\n\\n    struct Data {\\n        address defaultController;\\n        address[] assetPools;\\n        mapping(address => bool) isAssetPool;\\n        IDiamondCut.FacetCut[] defaultCut;\\n    }\\n\\n    function s() internal pure returns (Data storage bs) {\\n        bytes32 position = FACTORY_STORAGE_POSITION;\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x128c75d0dab5b4f799bdfa143d3f526793a157a627f81cce21255fb02869d267\",\"license\":\"Apache-2.0\"},\"contracts/modules/RelayHub/interfaces/IRelayHubFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IRelayHubFacet {\\n    event Result(bool success, bytes data);\\n\\n    function getLatestNonce(address _signer) external view returns (uint256);\\n\\n    function call(\\n        bytes calldata _call,\\n        uint256 _nonce,\\n        bytes memory _sig\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1aaf9386dfb45767a89a9d641e40193c51b7168af800374a625a5cc60f5468ef\",\"license\":\"Apache-2.0\"},\"contracts/modules/Withdraw/interfaces/IWithdrawFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWithdrawFacet {\\n    event WithdrawPollCreated(uint256 id, uint256 indexed member);\\n\\n    function proposeWithdraw(\\n        uint256 _amount,\\n        address _beneficiary,\\n        uint256 _unlockDate\\n    ) external;\\n\\n    function proposeBulkWithdraw(\\n        uint256[] memory _amounts,\\n        address[] memory _beneficiaries,\\n        uint256[] memory _unlockDates\\n    ) external;\\n\\n    function setProposeWithdrawPollDuration(uint256 _duration) external;\\n\\n    function getProposeWithdrawPollDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5e54befd3198c3fb5ae13485dc15bbda697ad4787ee63badb642e407eba3fe33\",\"license\":\"Apache-2.0\"},\"contracts/modules/Withdraw/interfaces/IWithdrawPollFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWithdrawPollFacet {\\n    event Withdrawn(uint256 id, address indexed member, uint256 reward);\\n    event WithdrawPollVoted(uint256 id, address indexed member, bool vote);\\n    event WithdrawPollFinalized(uint256 id, bool approved);\\n    event WithdrawPollRevokedVote(uint256 id, address indexed member);\\n    event WithdrawFeeCollected(uint256 fee);\\n\\n    function getBeneficiary(uint256 _id) external view returns (uint256);\\n\\n    function getAmount(uint256 _id) external view returns (uint256);\\n\\n    function getUnlockDate(uint256 _id) external view returns (uint256);\\n\\n    function _withdrawPollVote(bool _agree) external;\\n\\n    function _withdrawPollRevokeVote() external;\\n\\n    function _withdrawPollFinalize() external;\\n\\n    function _withdrawPollApprovalState() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xadd6954b43e64e5a7c8c0f1a316ac08ec1c9cee6789570e57a8cea2c89c53ad6\",\"license\":\"Apache-2.0\"},\"contracts/modules/Withdraw/interfaces/IWithdrawPollProxyFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IWithdrawPollProxyFacet {\\n    function withdrawPollVote(uint256 _id, bool _agree) external;\\n\\n    function withdrawPollRevokeVote(uint256 _id) external;\\n\\n    function withdrawPollFinalize(uint256 _id) external;\\n\\n    function withdrawPollApprovalState(uint256 _id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5e9d4f1ae83845c886cf380d3b8fb659f88f1f8596be3141e9fbc1026ecf4769\",\"license\":\"Apache-2.0\"},\"contracts/utils/Access.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\n/******************************************************************************\\\\\\n* @title Access\\n* @author Evert Kors <evert@thx.network>\\n* @notice Implement role-based access control.\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport 'diamond-2/contracts/libraries/LibDiamond.sol';\\nimport './RelayReceiver.sol';\\nimport '../interfaces/IAccessControlEvents.sol';\\nimport '../modules/AccessControl/lib/LibAccessStorage.sol';\\n\\ncontract Access is RelayReceiver, IAccessControlEvents {\\n    //\\n    // Access control view methods internal\\n    //\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    modifier onlyOwner() {\\n        require(LibDiamond.contractOwner() == _msgSender(), 'NOT_OWNER');\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(_hasRole(MANAGER_ROLE, _msgSender()), 'NOT_MANAGER');\\n        _;\\n    }\\n\\n    modifier onlyMember() {\\n        require(_hasRole(MEMBER_ROLE, _msgSender()), 'NOT_MEMBER');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks if account bears role.\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     * @return if role member storage array contains the given account address.\\n     */\\n    function _hasRole(bytes32 role, address account) internal view virtual returns (bool) {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        return rs.roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Called in initialize methods.\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Called during initialization\\n     * @param role Bytes32 array representing the role.\\n     * @param adminRole Address of the role admin\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        emit RoleAdminChanged(role, rs.roles[role].adminRole, adminRole);\\n        rs.roles[role].adminRole = adminRole;\\n    }\\n\\n    /**\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        if (rs.roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        if (rs.roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    //\\n    // Pool roles view methods internal\\n    //\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 internal constant MEMBER_ROLE = keccak256('MEMBER_ROLE');\\n    bytes32 internal constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\\n\\n    function _isManager(address _account) internal view returns (bool) {\\n        return _hasRole(MANAGER_ROLE, _account);\\n    }\\n\\n    function _isMember(address _account) internal view returns (bool) {\\n        return _hasRole(MEMBER_ROLE, _account) || _hasRole(MANAGER_ROLE, _account);\\n    }\\n\\n    function _getOwner() internal view returns (address) {\\n        return LibDiamond.contractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x98aea45dad96d2f5b37151d1e95dd43d08fb3177d564a81e813e14e2fe22eb4c\",\"license\":\"Apache-2.0\"},\"contracts/utils/RelayDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport 'diamond-2/contracts/libraries/LibDiamond.sol';\\nimport 'diamond-2/contracts/interfaces/IDiamondLoupe.sol';\\nimport 'diamond-2/contracts/interfaces/IDiamondCut.sol';\\nimport 'diamond-2/contracts/interfaces/IERC173.sol';\\nimport 'diamond-2/contracts/interfaces/IERC165.sol';\\n\\ncontract RelayDiamond {\\n    constructor(IDiamondCut.FacetCut[] memory _diamondCut, address _owner) payable {\\n        LibDiamond.diamondCut(_diamondCut, address(0), new bytes(0));\\n        LibDiamond.setContractOwner(_owner);\\n\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n\\n        // adding ERC165 data\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamond.DiamondStorage storage ds;\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n        address facet = address(bytes20(ds.facets[msg.sig]));\\n\\n        require(facet != address(0), 'Diamond: Function does not exist');\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            if eq(caller(), address()) {\\n                let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n                returndatacopy(0, 0, returndatasize())\\n                switch result\\n                    case 0 {\\n                        revert(0, returndatasize())\\n                    }\\n                    default {\\n                        return(0, returndatasize())\\n                    }\\n            }\\n            {\\n                mstore(calldatasize(), caller())\\n                let result := delegatecall(gas(), facet, 0, add(calldatasize(), 0x20), 0, 0)\\n                returndatacopy(0, 0, returndatasize())\\n                switch result\\n                    case 0 {\\n                        revert(0, returndatasize())\\n                    }\\n                    default {\\n                        return(0, returndatasize())\\n                    }\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xa9b8bf03443553ae655f41e6ff8338abb889fa59f115700699ad8520b501e6d1\",\"license\":\"MIT\"},\"contracts/utils/RelayReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/GSNRecipient.sol\\n// But kept minimalist.\\ncontract RelayReceiver {\\n    function _msgSender() internal pure returns (address payable result) {\\n        // If not call from RelayHub, return original sender\\n        // We need to read 20 bytes (an address) located at array index msg.data.length - 20. In memory, the array\\n        // is prefixed with a 32-byte length value, so we first add 32 to get the memory read index. However, doing\\n        // so would leave the address in the upper 20 bytes of the 32-byte word, which is inconvenient and would\\n        // require bit shifting. We therefore subtract 12 from the read index so the address lands on the lower 20\\n        // bytes. This can always be done due to the 32-byte prefix.\\n\\n        // The final memory read index is msg.data.length - 20 + 32 - 12 = msg.data.length. Using inline assembly is the\\n        // easiest/most-efficient way to perform this operation.\\n\\n        // These fields are not accessible from assembly\\n        bytes memory array = msg.data;\\n        uint256 index = msg.data.length;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n            result := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x389a8fb5beb19d72205c811e0af13ca5ce2ab019e0b8ef70ce209d4876783e57\",\"license\":\"Apache-2.0\"},\"diamond-2/contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x19c92fe16028a8e74a5f1914235b3e7f4e5eafbc5fced9fa345cab5cd4644c0c\",\"license\":\"MIT\"},\"diamond-2/contracts/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x2bf203d5f1fd4f94f7d0de38d664d07126245c9bc434cd15863b2aa6a27cc707\",\"license\":\"MIT\"},\"diamond-2/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc19b99fbeaeb943b6d12e6d631b6ae1738aaa498ee49f67caaccc6238fd0d458\",\"license\":\"MIT\"},\"diamond-2/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xbd57ffc856416d3ba942ac7b547eb9626c631d5fe2386ccf134b4c473b3d8705\",\"license\":\"MIT\"},\"diamond-2/contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* This is gas optimized by reducing storage reads and storage writes.\\n* This code is as complex as it is to reduce gas costs.\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // owner of the contract\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n        _;\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            // get last selectorSlot\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                uint256 selectorInSlotPosition = (_selectorCount % 8) * 32;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    ds.selectorSlots[_selectorCount / 8] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Replace facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            uint256 selectorSlotCount = _selectorCount / 8;\\n            uint256 selectorInSlotIndex = (_selectorCount % 8) - 1;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex * 32));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount / 8;\\n                    oldSelectorInSlotPosition = (oldSelectorCount % 8) * 32;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n                selectorInSlotIndex--;\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex + 1;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x8f7751980297b63c26a4cf8d7830ba82befde6a07b6a179115985c8d04d6b3cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612cf8806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c806355196bd9146200004b5780636f68b5031462000064578063c4be3b36146200007b575b600080fd5b620000626200005c36600462000830565b62000092565b005b620000626200007536600462000854565b620000c8565b620000626200008c366004620008a6565b62000300565b6200009c620005bb565b80620000a7620005f5565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620000d262000619565b600401546001600160a01b0316620000e96200063d565b6001600160a01b0316146200011b5760405162461bcd60e51b8152600401620001129062000a6d565b60405180910390fd5b6001600160a01b038116620001445760405162461bcd60e51b8152600401620001129062000a90565b600062000150620005f5565b90506000833060405162000164906200068a565b620001719291906200092b565b604051809103906000f0801580156200018e573d6000803e3d6000fd5b5060405163094144a560e01b815290915081906001600160a01b0382169063094144a590620001c290879060040162000917565b600060405180830381600087803b158015620001dd57600080fd5b505af1158015620001f2573d6000803e3d6000fd5b5050845460405163f2fde38b60e01b81526001600160a01b03808616945063f2fde38b93506200022792169060040162000917565b600060405180830381600087803b1580156200024257600080fd5b505af115801562000257573d6000803e3d6000fd5b505084546040516354208a2f60e01b81526001600160a01b0380861694506354208a2f93506200028c92169060040162000917565b600060405180830381600087803b158015620002a757600080fd5b505af1158015620002bc573d6000803e3d6000fd5b505050507ff0d1eeab175eee2e20b8dc452773bf2257b25724b323b42bc6e5b4616233ae1f82604051620002f1919062000917565b60405180910390a15050505050565b6001600160a01b038216620003295760405162461bcd60e51b8152600401620001129062000a48565b6001600160a01b038116620003525760405162461bcd60e51b8152600401620001129062000a90565b6200035c62000619565b600401546001600160a01b0316620003736200063d565b6001600160a01b0316146200039c5760405162461bcd60e51b8152600401620001129062000a6d565b6000620003a8620005f5565b905060008430604051620003bc906200068a565b620003c99291906200092b565b604051809103906000f080158015620003e6573d6000803e3d6000fd5b50604051633dbbe6b560e11b815290915081906001600160a01b03821690637b77cd6a906200041a90889060040162000917565b600060405180830381600087803b1580156200043557600080fd5b505af11580156200044a573d6000803e3d6000fd5b505060405163614d37ed60e11b81526001600160a01b038416925063c29a6fda91506200047c90879060040162000917565b600060405180830381600087803b1580156200049757600080fd5b505af1158015620004ac573d6000803e3d6000fd5b5050845460405163f2fde38b60e01b81526001600160a01b03808616945063f2fde38b9350620004e192169060040162000917565b600060405180830381600087803b158015620004fc57600080fd5b505af115801562000511573d6000803e3d6000fd5b505084546040516354208a2f60e01b81526001600160a01b0380861694506354208a2f93506200054692169060040162000917565b600060405180830381600087803b1580156200056157600080fd5b505af115801562000576573d6000803e3d6000fd5b505050507ff0d1eeab175eee2e20b8dc452773bf2257b25724b323b42bc6e5b4616233ae1f82604051620005ab919062000917565b60405180910390a1505050505050565b620005c562000619565b600401546001600160a01b03163314620005f35760405162461bcd60e51b8152600401620001129062000a06565b565b7f45817ba6b30d8ede47e03b406ff166d55a47263294241efd9c0dcf683d919a4c90565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031692915050565b6121cc8062000af783390190565b80356001600160a01b0381168114620006b057600080fd5b919050565b600082601f830112620006c6578081fd5b8135620006dd620006d78262000ad7565b62000ab2565b818152915060208083019084810181840286018201871015620006ff57600080fd5b6000805b85811015620007375782356001600160e01b03198116811462000724578283fd5b8552938301939183019160010162000703565b50505050505092915050565b600082601f83011262000754578081fd5b813562000765620006d78262000ad7565b818152915060208083019084810160005b84811015620008255781358701606080601f19838c030112156200079957600080fd5b6040805182810167ffffffffffffffff8282108183111715620007b857fe5b818452620007c889870162000698565b835283860135915060038210620007de57600080fd5b818984015284860135945080851115620007f757600080fd5b5050620008098c8885870101620006b5565b9181019190915286525050928201929082019060010162000776565b505050505092915050565b60006020828403121562000842578081fd5b6200084d8262000698565b9392505050565b6000806040838503121562000867578081fd5b823567ffffffffffffffff8111156200087e578182fd5b6200088c8582860162000743565b9250506200089d6020840162000698565b90509250929050565b600080600060608486031215620008bb578081fd5b833567ffffffffffffffff811115620008d2578182fd5b620008e08682870162000743565b935050620008f16020850162000698565b9150620009016040850162000698565b90509250925092565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b604080825283518282018190526000919060609081850190602080820287018401818a01875b84811015620009e657898303605f19018652815180516001600160a01b031684528481015188850190600381106200098557fe5b85870152908901518985018990528051918290528501908a9060808601905b80831015620009d05783516001600160e01b0319168252928701926001929092019190870190620009a4565b5097860197945050509083019060010162000951565b505080965050620009fa818801896200090a565b50505050509392505050565b60208082526022908201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60408201526132b960f11b606082015260800190565b6020808252600b908201526a4e4f5f524547495354525960a81b604082015260600190565b6020808252600990820152682727aa2fa7aba722a960b91b604082015260600190565b6020808252600890820152672727afaa27a5a2a760c11b604082015260600190565b60405181810167ffffffffffffffff8111828210171562000acf57fe5b604052919050565b600067ffffffffffffffff82111562000aec57fe5b506020908102019056fe6080604052604051620021cc380380620021cc833981016040819052620000269162000a0e565b604080516000808252602082019092526200004e918491620000f160201b620000be1760201c565b62000064816200023860201b620001ef1760201c565b60006200007b6200029a60201b6200024f1760201c565b6301ffc9a760e01b600090815260039091016020526040808220805460ff1990811660019081179092556307e4c70760e21b845282842080548216831790556348e2b09360e01b845282842080548216831790556307f5828d60e41b845291909220805490911690911790555062001178915050565b6000620000fd6200029a565b600281015490915061ffff16806000806008830611156200012f57506008810460009081526001840160205260409020545b60005b8751811015620001a7576200019983838a84815181106200014f57fe5b6020026020010151600001518b85815181106200016857fe5b6020026020010151602001518c86815181106200018157fe5b602002602001015160400151620002be60201b60201c565b909350915060010162000132565b50828214620001c45760028401805461ffff191661ffff84161790555b6007821615620001e65760088204600090815260018501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738787876040516200021b9392919062000b81565b60405180910390a16200022f8686620007fe565b50505050505050565b6000620002446200029a565b6004810180546001600160a01b038581166001600160a01b031983168117909355604051939450169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60008080620002cc6200029a565b90506000845111620002fb5760405162461bcd60e51b8152600401620002f29062000d30565b60405180910390fd5b60008560028111156200030a57fe5b141562000443576001600160a01b0386166200033a5760405162461bcd60e51b8152600401620002f29062000e1f565b6200035f8660405180606001604052806024815260200162002158602491396200093f565b60005b84518110156200043c5760008582815181106200037b57fe5b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c15620003c95760405162461bcd60e51b8152600401620002f29062000f66565b6001600160e01b03198281166000818152602087815260409091206001600160601b031960608e901b168f17905560078e160290811c91811c199b909b16179960e08114156200042c5760088c04600090815260018601602052604081209b909b555b5050506001988901980162000362565b50620007f2565b60018560028111156200045257fe5b1415620005b4576001600160a01b038616620004825760405162461bcd60e51b8152600401620002f29062000e6b565b620004a786604051806060016040528060288152602001620021a4602891396200093f565b60005b84518110156200043c576000858281518110620004c357fe5b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c30811415620005145760405162461bcd60e51b8152600401620002f2906200106c565b896001600160a01b0316816001600160a01b03161415620005495760405162461bcd60e51b8152600401620002f29062000fc3565b6001600160a01b038116620005725760405162461bcd60e51b8152600401620002f290620010bb565b506001600160e01b031990911660009081526020849052604090206001600160601b03919091166001600160601b031960608a901b16179055600101620004aa565b6002856002811115620005c357fe5b1415620007d8576001600160a01b03861615620005f45760405162461bcd60e51b8152600401620002f2906200100f565b6008880460001960078a160160005b8651811015620007c6578962000632576000199092016000818152600185016020526040902054995091600791505b6000806000808a85815181106200064557fe5b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c620006925760405162461bcd60e51b8152600401620002f29062000d7b565b606081901c301415620006b95760405162461bcd60e51b8152600401620002f29062000f18565b602087028f901b94506001600160e01b0319808616908316146200070a576001600160e01b03198516600090815260208a90526040902080546001600160601b0319166001600160601b0383161790555b6001600160e01b03198216600090815260208a9052604081205561ffff811660088104945060088106602002935050505085821462000773576000828152600188016020526040902080546001600160e01b031980841c19909116908516831c17905562000797565b80836001600160e01b031916901c816001600160e01b031960001b901c198e16179c505b84620007b357600086815260018801602052604081208190559c505b5050600019909201915060010162000603565b506001600890920201019750620007f2565b60405162461bcd60e51b8152600401620002f29062000dd8565b50959694955050505050565b6001600160a01b03821662000835578051156200082f5760405162461bcd60e51b8152600401620002f29062000c8d565b6200093b565b6000815111620008595760405162461bcd60e51b8152600401620002f29062000ebb565b6001600160a01b03821630146200088f576200088f826040518060600160405280602881526020016200217c602891396200093f565b60006060836001600160a01b031683604051620008ad919062000b63565b600060405180830381855af49150503d8060008114620008ea576040519150601f19603f3d011682016040523d82523d6000602084013e620008ef565b606091505b50915091508162000938578051156200091e578060405162461bcd60e51b8152600401620002f2919062000c71565b60405162461bcd60e51b8152600401620002f29062000cea565b50505b5050565b813b8181620009385760405162461bcd60e51b8152600401620002f2919062000c71565b80516001600160a01b03811681146200097b57600080fd5b919050565b600082601f83011262000991578081fd5b8151620009a8620009a2826200112b565b62001107565b818152915060208083019084810181840286018201871015620009ca57600080fd5b6000805b8581101562000a025782516001600160e01b031981168114620009ef578283fd5b85529383019391830191600101620009ce565b50505050505092915050565b6000806040838503121562000a21578182fd5b82516001600160401b038082111562000a38578384fd5b818501915085601f83011262000a4c578384fd5b815162000a5d620009a2826200112b565b81815260208082019190858101885b8581101562000b0757815188016060818e03601f1901121562000a8d578a8bfd5b604051606081018181108a8211171562000aa357fe5b60405262000ab382860162000963565b815260408201516003811062000ac7578c8dfd5b8186015260608201518981111562000add578c8dfd5b62000aed8f878386010162000980565b604083015250865250938201939082019060010162000a6c565b505081975062000b19818a0162000963565b96505050505050509250929050565b6001600160a01b03169052565b6000815180845262000b4f81602086016020860162001149565b601f01601f19169290920160200192915050565b6000825162000b7781846020870162001149565b9190910192915050565b606080825284518282018190526000919060809081850190602080820287018401818b01875b8481101562000c3e57898303607f19018652815180516001600160a01b0316845284810151898501906003811062000bdb57fe5b858701526040918201519185018a9052815190819052908501908a90898601905b8083101562000c285783516001600160e01b031916825292870192600192909201919087019062000bfc565b5097860197945050509083019060010162000ba7565b505062000c4e8289018b62000b28565b878103604089015262000c62818a62000b35565b9b9a5050505050505050505050565b60006020825262000c86602083018462000b35565b9392505050565b6020808252603c908201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860408201527f3029206275745f63616c6c64617461206973206e6f7420656d70747900000000606082015260800190565b60208082526026908201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656040820152651d995c9d195960d21b606082015260800190565b6020808252602b908201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660408201526a1858d95d081d1bc818dd5d60aa1b606082015260800190565b60208082526037908201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360408201527f74696f6e207468617420646f65736e2774206578697374000000000000000000606082015260800190565b60208082526027908201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756040820152663a20b1ba34b7b760c91b606082015260800190565b6020808252602c908201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260408201526b65206164647265737328302960a01b606082015260800190565b60208082526030908201527f4c69624469616d6f6e644375743a205265706c6163652066616365742063616e60408201526f2774206265206164647265737328302960801b606082015260800190565b6020808252603d908201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460408201527f7920627574205f696e6974206973206e6f742061646472657373283029000000606082015260800190565b6020808252602e908201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560408201526d3a30b1363290333ab731ba34b7b760911b606082015260800190565b60208082526035908201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60408201527f6e207468617420616c7265616479206578697374730000000000000000000000606082015260800190565b60208082526038908201526000805160206200213883398151915260408201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000606082015260800190565b60208082526036908201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260408201527f657373206d757374206265206164647265737328302900000000000000000000606082015260800190565b6020808252602f908201527f4c69624469616d6f6e644375743a2043616e2774207265706c61636520696d6d60408201526e3aba30b1363290333ab731ba34b7b760891b606082015260800190565b60208082526038908201526000805160206200213883398151915260408201527f6374696f6e207468617420646f65736e27742065786973740000000000000000606082015260800190565b6040518181016001600160401b03811182821017156200112357fe5b604052919050565b60006001600160401b038211156200113f57fe5b5060209081020190565b60005b83811015620011665781810151838201526020016200114c565b83811115620009385750506000910152565b610fb080620011886000396000f3fe60806040523661000b57005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6020819052604090912054819060601c806100725760405162461bcd60e51b815260040161006990610c46565b60405180910390fd5b36600080373033141561009e57600080366000845af43d6000803e808015610099573d6000f35b3d6000fd5b333652600080602036016000845af43d6000803e808015610099573d6000f35b60006100c861024f565b600281015490915061ffff16806000806008830611156100f957506008810460009081526001840160205260409020545b60005b87518110156101645761015783838a848151811061011657fe5b6020026020010151600001518b858151811061012e57fe5b6020026020010151602001518c868151811061014657fe5b602002602001015160400151610273565b90935091506001016100fc565b508282146101805760028401805461ffff191661ffff84161790555b60078216156101a15760088204600090815260018501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738787876040516101d493929190610917565b60405180910390a16101e68686610776565b50505050505050565b60006101f961024f565b6004810180546001600160a01b038581166001600160a01b031983168117909355604051939450169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b600080600061028061024f565b905060008451116102a35760405162461bcd60e51b815260040161006990610abb565b60008560028111156102b157fe5b14156103db576001600160a01b0386166102dd5760405162461bcd60e51b815260040161006990610baa565b6102ff86604051806060016040528060248152602001610f07602491396108a1565b60005b84518110156103d557600085828151811061031957fe5b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c156103645760405162461bcd60e51b815260040161006990610d26565b6001600160e01b03198281166000818152602087815260409091206001600160601b031960608e901b168f17905560078e160290811c91811c199b909b16179960e08114156103c65760088c04600090815260018601602052604081209b909b555b50505060019889019801610302565b5061076a565b60018560028111156103e957fe5b141561053d576001600160a01b0386166104155760405162461bcd60e51b815260040161006990610bf6565b61043786604051806060016040528060288152602001610f53602891396108a1565b60005b84518110156103d557600085828151811061045157fe5b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c3081141561049f5760405162461bcd60e51b815260040161006990610e2e565b896001600160a01b0316816001600160a01b031614156104d15760405162461bcd60e51b815260040161006990610d7b565b6001600160a01b0381166104f75760405162461bcd60e51b815260040161006990610e7d565b506001600160e01b031990911660009081526020849052604090206bffffffffffffffffffffffff919091166001600160601b031960608a901b1617905560010161043a565b600285600281111561054b57fe5b1415610752576001600160a01b038616156105785760405162461bcd60e51b815260040161006990610dd8565b6008880460001960078a160160005b865181101561074157896105b4576000199092016000818152600185016020526040902054995091600791505b6000806000808a85815181106105c657fe5b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c6106105760405162461bcd60e51b815260040161006990610b06565b606081901c3014156106345760405162461bcd60e51b815260040161006990610cd8565b602087028f901b94506001600160e01b031980861690831614610689576001600160e01b03198516600090815260208a90526040902080546001600160601b0319166bffffffffffffffffffffffff83161790555b6001600160e01b03198216600090815260208a9052604081205561ffff81166008810494506008810660200293505050508582146106f0576000828152600188016020526040902080546001600160e01b031980841c19909116908516831c179055610714565b80836001600160e01b031916901c816001600160e01b031960001b901c198e16179c505b8461072f57600086815260018801602052604081208190559c505b50506000199092019150600101610587565b50600160089092020101975061076a565b60405162461bcd60e51b815260040161006990610b63565b50959694955050505050565b6001600160a01b0382166107a8578051156107a35760405162461bcd60e51b815260040161006990610a18565b61089d565b60008151116107c95760405162461bcd60e51b815260040161006990610c7b565b6001600160a01b03821630146107fb576107fb82604051806060016040528060288152602001610f2b602891396108a1565b60006060836001600160a01b03168360405161081791906108fb565b600060405180830381855af49150503d8060008114610852576040519150601f19603f3d011682016040523d82523d6000602084013e610857565b606091505b50915091508161089a57805115610882578060405162461bcd60e51b815260040161006991906109fe565b60405162461bcd60e51b815260040161006990610a75565b50505b5050565b813b818161089a5760405162461bcd60e51b815260040161006991906109fe565b6001600160a01b03169052565b600081518084526108e7816020860160208601610eda565b601f01601f19169290920160200192915050565b6000825161090d818460208701610eda565b9190910192915050565b606080825284518282018190526000919060809081850190602080820287018401818b01875b848110156109cf57898303607f19018652815180516001600160a01b0316845284810151898501906003811061096f57fe5b858701526040918201519185018a9052815190819052908501908a90898601905b808310156109ba5783516001600160e01b0319168252928701926001929092019190870190610990565b5097860197945050509083019060010161093d565b50506109dd8289018b6108c2565b87810360408901526109ef818a6108cf565b9b9a5050505050505050505050565b600060208252610a1160208301846108cf565b9392505050565b6020808252603c908201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860408201527f3029206275745f63616c6c64617461206973206e6f7420656d70747900000000606082015260800190565b60208082526026908201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656040820152651d995c9d195960d21b606082015260800190565b6020808252602b908201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660408201526a1858d95d081d1bc818dd5d60aa1b606082015260800190565b60208082526037908201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360408201527f74696f6e207468617420646f65736e2774206578697374000000000000000000606082015260800190565b60208082526027908201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756040820152663a20b1ba34b7b760c91b606082015260800190565b6020808252602c908201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260408201526b65206164647265737328302960a01b606082015260800190565b60208082526030908201527f4c69624469616d6f6e644375743a205265706c6163652066616365742063616e60408201526f2774206265206164647265737328302960801b606082015260800190565b6020808252818101527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f74206578697374604082015260600190565b6020808252603d908201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460408201527f7920627574205f696e6974206973206e6f742061646472657373283029000000606082015260800190565b6020808252602e908201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560408201526d3a30b1363290333ab731ba34b7b760911b606082015260800190565b60208082526035908201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6040820152746e207468617420616c72656164792065786973747360581b606082015260800190565b60208082526038908201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60408201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000606082015260800190565b60208082526036908201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604082015275657373206d757374206265206164647265737328302960501b606082015260800190565b6020808252602f908201527f4c69624469616d6f6e644375743a2043616e2774207265706c61636520696d6d60408201526e3aba30b1363290333ab731ba34b7b760891b606082015260800190565b60208082526038908201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60408201527f6374696f6e207468617420646f65736e27742065786973740000000000000000606082015260800190565b60005b83811015610ef5578181015183820152602001610edd565b8381111561089a575050600091015256fe4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a2646970667358221220e9924ec3c8f1a78f165c0e54c475e8a7c7a0871c24e07d854255a97976f6e08864736f6c634300070400334c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a2646970667358221220511dd1ea6d278809e2ba7b2267e5bedeb901e69341a739e7b32afdaabafdf43f64736f6c63430007040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deployDefaultPool((address,uint8,bytes4[])[],address,address)": {
        "details": "Transfers ownership to the controller and initializes access control.",
        "params": {
          "_facets": "Pool facets for the factory diamond to deploy.",
          "_registry": "Registry address to point the pool to."
        }
      },
      "deployNFTPool((address,uint8,bytes4[])[],address)": {
        "details": "Transfers ownership to the controller and initializes access control.",
        "params": {
          "_facets": "Pool facets for the factory diamond to deploy."
        }
      },
      "setDefaultController(address)": {
        "params": {
          "_controller": "Address of the diamond controller."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployDefaultPool((address,uint8,bytes4[])[],address,address)": {
        "notice": "Deploys and stores the reference to an pool based on the current defaultCut."
      },
      "deployNFTPool((address,uint8,bytes4[])[],address)": {
        "notice": "Deploys and stores the reference to an nft pool based."
      },
      "setDefaultController(address)": {
        "notice": "Sets the controller for the factory diamond."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}