{
  "address": "0x19F3f6AfF29a89a654663C258E7c329c5282c29F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7be4dd5111a8e9ba8cd75a3a9673a222999265c2f159789deeea7d983faa3bd7",
  "receipt": {
    "to": null,
    "from": "0xE4f3EEA6CeB6D8Cda41E1F78F4c549946a1EB395",
    "contractAddress": "0x19F3f6AfF29a89a654663C258E7c329c5282c29F",
    "transactionIndex": 17,
    "gasUsed": "481334",
    "logsBloom": "0x
    "blockHash": "0x42afbe136e515592620846f789225b4823510ca84894cff6cd040cf3b8483a2b",
    "transactionHash": "0x7be4dd5111a8e9ba8cd75a3a9673a222999265c2f159789deeea7d983faa3bd7",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 25549986,
        "transactionHash": "0x7be4dd5111a8e9ba8cd75a3a9673a222999265c2f159789deeea7d983faa3bd7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e4f3eea6ceb6d8cda41e1f78f4c549946a1eb395",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001119b505f0b4f40000000000000000000000000000000000000000000000008a0fb43b467fab800000000000000000000000000000000000000000000008207ab20fbd98eb54d300000000000000000000000000000000000000000000000089fe9a86408ef68c0000000000000000000000000000000000000000000008207ac329729edc09c7",
        "logIndex": 130,
        "blockHash": "0x42afbe136e515592620846f789225b4823510ca84894cff6cd040cf3b8483a2b"
      }
    ],
    "blockNumber": 25549986,
    "cumulativeGasUsed": "4967131",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "954101db8fd21c30da9bb6a572893bde",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"params\":{\"role\":\"Bytes32 array representing the role\"},\"returns\":{\"_0\":\"Bytes32 array of the administrative role for the given role.\"}},\"getRoleMember(bytes32,uint256)\":{\"params\":{\"index\":\"Index of the pool member.\",\"role\":\"Role of the pool member.\"},\"returns\":{\"_0\":\"member address.\"}},\"getRoleMemberCount(bytes32)\":{\"params\":{\"role\":\"Role to get the count for.\"},\"returns\":{\"_0\":\"the amount of members for the role.\"}},\"grantRole(bytes32,address)\":{\"params\":{\"account\":\"Address of the account that is given the role.\",\"role\":\"Bytes32 array representing the role.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"Account to check the role for.\",\"role\":\"Role to check account for.\"},\"returns\":{\"_0\":\"if the account bears the role.\"}},\"renounceRole(bytes32,address)\":{\"params\":{\"account\":\"Address of the account\",\"role\":\"Bytes32 array representing the role.\"}},\"revokeRole(bytes32,address)\":{\"params\":{\"account\":\"Address of the account\",\"role\":\"Bytes32 array representing the role.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"notice\":\"Determines what role is required to manage the role.\"},\"getRoleMember(bytes32,uint256)\":{\"notice\":\"Gets the member address for a given role.\"},\"getRoleMemberCount(bytes32)\":{\"notice\":\"Gets the amount of members for a role.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to a given account address.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Checks if an address bears a given role.\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Renounces the role for a given account address if equal to sender address.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes the role for a given account address if sender is admin of the role.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/01-AccessControl/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2\",\"license\":\"MIT\"},\"contracts/01-AccessControl/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/******************************************************************************\\\\\\n* @title Access Control\\n* @author Evert Kors <evert@thx.network>\\n* @notice Implement role-based access control.\\n* \\n* @dev\\n* Implementations: \\n* TMP-1 Access Control: https://github.com/thxprotocol/modules/issues/1\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport '../TMP/TMP1/LibAccessStorage.sol';\\nimport '../TMP/TMP1/IAccessControl.sol';\\nimport '../TMP/TMP1/IAccessControlEvents.sol';\\nimport '../TMP/RelayReceiver.sol';\\n\\ncontract AccessControl is IAccessControl, IAccessControlEvents, RelayReceiver {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    /**\\n     * @notice Checks if an address bears a given role.\\n     * @param role Role to check account for.\\n     * @param account Account to check the role for.\\n     * @return if the account bears the role.\\n     */\\n    function hasRole(bytes32 role, address account) external view override returns (bool) {\\n        return _hasRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Gets the amount of members for a role.\\n     * @param role Role to get the count for.\\n     * @return the amount of members for the role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view override returns (uint256) {\\n        return LibAccessStorage.roleStorage().roles[role].members.length();\\n    }\\n\\n    /**\\n     * @notice Gets the member address for a given role.\\n     * @param role Role of the pool member.\\n     * @param index Index of the pool member.\\n     * @return member address.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view override returns (address) {\\n        return LibAccessStorage.roleStorage().roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @notice Determines what role is required to manage the role.\\n     * @param role Bytes32 array representing the role\\n     * @return Bytes32 array of the administrative role for the given role.\\n     */\\n    function getRoleAdmin(bytes32 role) external view override returns (bytes32) {\\n        return LibAccessStorage.roleStorage().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice Grants a role to a given account address.\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account that is given the role.\\n     */\\n    function grantRole(bytes32 role, address account) external override {\\n        require(\\n            _hasRole(LibAccessStorage.roleStorage().roles[role].adminRole, _msgSender()),\\n            'AccessControl: sender must be an admin to grant'\\n        );\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes the role for a given account address if sender is admin of the role.\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function revokeRole(bytes32 role, address account) external override {\\n        require(\\n            _hasRole(LibAccessStorage.roleStorage().roles[role].adminRole, _msgSender()),\\n            'AccessControl: sender must be an admin to revoke'\\n        );\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Renounces the role for a given account address if equal to sender address.\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == _msgSender(), 'AccessControl: can only renounce roles for self');\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Checks if account bears role.\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     * @return if role member storage array contains the given account address.\\n     */\\n    function _hasRole(bytes32 role, address account) internal view virtual returns (bool) {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        return rs.roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Called in initialize methods.\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Called during initialization\\n     * @param role Bytes32 array representing the role.\\n     * @param adminRole Address of the role admin\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        emit RoleAdminChanged(role, rs.roles[role].adminRole, adminRole);\\n        rs.roles[role].adminRole = adminRole;\\n    }\\n\\n    /**\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        if (rs.roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        if (rs.roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x34b8794177221a59a8bcca2013b6876205cc62bdb5c38b4801ed54776604aa63\",\"license\":\"Apache-2.0\"},\"contracts/TMP/RelayReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/GSNRecipient.sol\\n// But kept minimalist.\\ncontract RelayReceiver {\\n    function _msgSender() internal pure returns (address payable result) {\\n        // If not call from RelayHub, return original sender\\n        // We need to read 20 bytes (an address) located at array index msg.data.length - 20. In memory, the array\\n        // is prefixed with a 32-byte length value, so we first add 32 to get the memory read index. However, doing\\n        // so would leave the address in the upper 20 bytes of the 32-byte word, which is inconvenient and would\\n        // require bit shifting. We therefore subtract 12 from the read index so the address lands on the lower 20\\n        // bytes. This can always be done due to the 32-byte prefix.\\n\\n        // The final memory read index is msg.data.length - 20 + 32 - 12 = msg.data.length. Using inline assembly is the\\n        // easiest/most-efficient way to perform this operation.\\n\\n        // These fields are not accessible from assembly\\n        bytes memory array = msg.data;\\n        uint256 index = msg.data.length;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n            result := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x389a8fb5beb19d72205c811e0af13ca5ce2ab019e0b8ef70ce209d4876783e57\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP1/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x19b0c7e6635833c346ea76e6aead0046d78cbe1434b4799075c9cdd0024ad219\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP1/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IAccessControlEvents {\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\\n\",\"keccak256\":\"0x861e728dd47fece4a3be7f9581be8192efa7bdd135ad4c71b977786d09cfe070\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP1/LibAccessStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\n\\nlibrary LibAccessStorage {\\n    // TODO test with conflicting storage (with other pools)\\n    // set storage pointer based upon assigned id (by factory)\\n\\n    bytes32 constant ACCESS_STORAGE_POSITION = keccak256('diamond.standard.access.storage');\\n\\n    struct RoleStorage {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    function roleStorage() internal pure returns (RoleStorage storage rs) {\\n        bytes32 position = ACCESS_STORAGE_POSITION;\\n        assembly {\\n            rs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b263026cf31b69957c414757a12ec6a3f30eda70155342941039a5864f9283b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506107bf806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639010d07c1161005b5780639010d07c1461010b57806391d148541461014a578063ca15c8731461018a578063d547741f146101a75761007d565b8063248a9ca3146100825780632f2ff15d146100b157806336568abe146100df575b600080fd5b61009f6004803603602081101561009857600080fd5b50356101d3565b60408051918252519081900360200190f35b6100dd600480360360408110156100c757600080fd5b50803590602001356001600160a01b03166101f1565b005b6100dd600480360360408110156100f557600080fd5b50803590602001356001600160a01b0316610265565b61012e6004803603604081101561012157600080fd5b50803590602001356102c6565b604080516001600160a01b039092168252519081900360200190f35b6101766004803603604081101561016057600080fd5b50803590602001356001600160a01b03166102f2565b604080519115158252519081900360200190f35b61009f600480360360208110156101a057600080fd5b50356102fe565b6100dd600480360360408110156101bd57600080fd5b50803590602001356001600160a01b031661031f565b60006101dd610365565b600092835260205250604090206002015490565b61021c6101fc610365565b60008481526020919091526040902060020154610217610389565b6103d6565b6102575760405162461bcd60e51b815260040180806020018281038252602f8152602001806106fc602f913960400191505060405180910390fd5b6102618282610404565b5050565b61026d610389565b6001600160a01b0316816001600160a01b0316146102bc5760405162461bcd60e51b815260040180806020018281038252602f81526020018061075b602f913960400191505060405180910390fd5b610261828261047c565b60006102e9826102d4610365565b600086815260209190915260409020906104f3565b90505b92915050565b60006102e983836103d6565b60006102ec61030b610365565b6000848152602091909152604090206104ff565b61032a6101fc610365565b6102bc5760405162461bcd60e51b815260040180806020018281038252603081526020018061072b6030913960400191505060405180910390fd5b7f6282190449f76f72a9f692e4d8619a03764b7253394788948e36a7a57ba4a00e90565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031692915050565b6000806103e1610365565b60008581526020829052604090209091506103fc908461050a565b949350505050565b600061040e610365565b6000848152602082905260409020909150610429908361051f565b1561047757610436610389565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b505050565b6000610486610365565b60008481526020829052604090209091506104a19083610534565b15610477576104ae610389565b6001600160a01b0316826001600160a01b0316847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a4505050565b60006102e98383610549565b60006102ec826105ad565b60006102e9836001600160a01b0384166105b1565b60006102e9836001600160a01b0384166105c9565b60006102e9836001600160a01b038416610613565b8154600090821061058b5760405162461bcd60e51b81526004018080602001828103825260228152602001806106da6022913960400191505060405180910390fd5b82600001828154811061059a57fe5b9060005260206000200154905092915050565b5490565b60009081526001919091016020526040902054151590565b60006105d583836105b1565b61060b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102ec565b5060006102ec565b600081815260018301602052604081205480156106cf578354600019808301919081019060009087908390811061064657fe5b906000526020600020015490508087600001848154811061066357fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061069357fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506102ec565b60009150506102ec56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220458f66cf22294882c2bb87cb2edc1de84b334c741b55ec926577e6c0f88d00fb64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80639010d07c1161005b5780639010d07c1461010b57806391d148541461014a578063ca15c8731461018a578063d547741f146101a75761007d565b8063248a9ca3146100825780632f2ff15d146100b157806336568abe146100df575b600080fd5b61009f6004803603602081101561009857600080fd5b50356101d3565b60408051918252519081900360200190f35b6100dd600480360360408110156100c757600080fd5b50803590602001356001600160a01b03166101f1565b005b6100dd600480360360408110156100f557600080fd5b50803590602001356001600160a01b0316610265565b61012e6004803603604081101561012157600080fd5b50803590602001356102c6565b604080516001600160a01b039092168252519081900360200190f35b6101766004803603604081101561016057600080fd5b50803590602001356001600160a01b03166102f2565b604080519115158252519081900360200190f35b61009f600480360360208110156101a057600080fd5b50356102fe565b6100dd600480360360408110156101bd57600080fd5b50803590602001356001600160a01b031661031f565b60006101dd610365565b600092835260205250604090206002015490565b61021c6101fc610365565b60008481526020919091526040902060020154610217610389565b6103d6565b6102575760405162461bcd60e51b815260040180806020018281038252602f8152602001806106fc602f913960400191505060405180910390fd5b6102618282610404565b5050565b61026d610389565b6001600160a01b0316816001600160a01b0316146102bc5760405162461bcd60e51b815260040180806020018281038252602f81526020018061075b602f913960400191505060405180910390fd5b610261828261047c565b60006102e9826102d4610365565b600086815260209190915260409020906104f3565b90505b92915050565b60006102e983836103d6565b60006102ec61030b610365565b6000848152602091909152604090206104ff565b61032a6101fc610365565b6102bc5760405162461bcd60e51b815260040180806020018281038252603081526020018061072b6030913960400191505060405180910390fd5b7f6282190449f76f72a9f692e4d8619a03764b7253394788948e36a7a57ba4a00e90565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031692915050565b6000806103e1610365565b60008581526020829052604090209091506103fc908461050a565b949350505050565b600061040e610365565b6000848152602082905260409020909150610429908361051f565b1561047757610436610389565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b505050565b6000610486610365565b60008481526020829052604090209091506104a19083610534565b15610477576104ae610389565b6001600160a01b0316826001600160a01b0316847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a4505050565b60006102e98383610549565b60006102ec826105ad565b60006102e9836001600160a01b0384166105b1565b60006102e9836001600160a01b0384166105c9565b60006102e9836001600160a01b038416610613565b8154600090821061058b5760405162461bcd60e51b81526004018080602001828103825260228152602001806106da6022913960400191505060405180910390fd5b82600001828154811061059a57fe5b9060005260206000200154905092915050565b5490565b60009081526001919091016020526040902054151590565b60006105d583836105b1565b61060b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102ec565b5060006102ec565b600081815260018301602052604081205480156106cf578354600019808301919081019060009087908390811061064657fe5b906000526020600020015490508087600001848154811061066357fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061069357fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506102ec565b60009150506102ec56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220458f66cf22294882c2bb87cb2edc1de84b334c741b55ec926577e6c0f88d00fb64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "params": {
          "role": "Bytes32 array representing the role"
        },
        "returns": {
          "_0": "Bytes32 array of the administrative role for the given role."
        }
      },
      "getRoleMember(bytes32,uint256)": {
        "params": {
          "index": "Index of the pool member.",
          "role": "Role of the pool member."
        },
        "returns": {
          "_0": "member address."
        }
      },
      "getRoleMemberCount(bytes32)": {
        "params": {
          "role": "Role to get the count for."
        },
        "returns": {
          "_0": "the amount of members for the role."
        }
      },
      "grantRole(bytes32,address)": {
        "params": {
          "account": "Address of the account that is given the role.",
          "role": "Bytes32 array representing the role."
        }
      },
      "hasRole(bytes32,address)": {
        "params": {
          "account": "Account to check the role for.",
          "role": "Role to check account for."
        },
        "returns": {
          "_0": "if the account bears the role."
        }
      },
      "renounceRole(bytes32,address)": {
        "params": {
          "account": "Address of the account",
          "role": "Bytes32 array representing the role."
        }
      },
      "revokeRole(bytes32,address)": {
        "params": {
          "account": "Address of the account",
          "role": "Bytes32 array representing the role."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "notice": "Determines what role is required to manage the role."
      },
      "getRoleMember(bytes32,uint256)": {
        "notice": "Gets the member address for a given role."
      },
      "getRoleMemberCount(bytes32)": {
        "notice": "Gets the amount of members for a role."
      },
      "grantRole(bytes32,address)": {
        "notice": "Grants a role to a given account address."
      },
      "hasRole(bytes32,address)": {
        "notice": "Checks if an address bears a given role."
      },
      "renounceRole(bytes32,address)": {
        "notice": "Renounces the role for a given account address if equal to sender address."
      },
      "revokeRole(bytes32,address)": {
        "notice": "Revokes the role for a given account address if sender is admin of the role."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}