{
  "address": "0xB6e2e40489734baCbA93D083DC307241C2ab1bC1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetPool",
          "type": "address"
        }
      ],
      "name": "AssetPoolDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetPool",
          "type": "address"
        }
      ],
      "name": "AssetPoolRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_facets",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "deployAssetPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "isAssetPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "registerAssetPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setDefaultController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d2c1d1f9e4e4cc0746559567c9046a35e3e9c9f96c71d99a6e3d86c8c682118",
  "receipt": {
    "to": null,
    "from": "0xE4f3EEA6CeB6D8Cda41E1F78F4c549946a1EB395",
    "contractAddress": "0xB6e2e40489734baCbA93D083DC307241C2ab1bC1",
    "transactionIndex": 20,
    "gasUsed": "2387553",
    "logsBloom": "0x
    "blockHash": "0x08b86e152ccfa915e1b1b98642cab21c680667146e12d5d05a3f3d4f29d71cbf",
    "transactionHash": "0x7d2c1d1f9e4e4cc0746559567c9046a35e3e9c9f96c71d99a6e3d86c8c682118",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 25549976,
        "transactionHash": "0x7d2c1d1f9e4e4cc0746559567c9046a35e3e9c9f96c71d99a6e3d86c8c682118",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e4f3eea6ceb6d8cda41e1f78f4c549946a1eb395",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000013ca1d224952500000000000000000000000000000000000000000000000008aab570565c125ea00000000000000000000000000000000000000000000082069770bed128988d40000000000000000000000000000000000000000000000008a978ce84377d39a000000000000000000000000000000000000000000000820698ad60a34d2db24",
        "logIndex": 159,
        "blockHash": "0x08b86e152ccfa915e1b1b98642cab21c680667146e12d5d05a3f3d4f29d71cbf"
      }
    ],
    "blockNumber": 25549976,
    "cumulativeGasUsed": "7802664",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "954101db8fd21c30da9bb6a572893bde",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetPool\",\"type\":\"address\"}],\"name\":\"AssetPoolDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetPool\",\"type\":\"address\"}],\"name\":\"AssetPoolRegistered\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_facets\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"deployAssetPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"isAssetPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"registerAssetPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setDefaultController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployAssetPool((address,uint8,bytes4[])[],address)\":{\"details\":\"Transfers ownership to the controller and initializes access control.\",\"params\":{\"_facets\":\"Asset Pool facets for the factory diamond to deploy.\",\"_registry\":\"Registry address to point the pool to.\"}},\"registerAssetPool(address)\":{\"params\":{\"_pool\":\"Address of pool that should be registered.\"}},\"setDefaultController(address)\":{\"params\":{\"_controller\":\"Address of the diamond controller.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployAssetPool((address,uint8,bytes4[])[],address)\":{\"notice\":\"Deploys and stores the reference to an asset pool based on the current defaultCut.\"},\"registerAssetPool(address)\":{\"notice\":\"Registers a pool address in the internal register. Only accessible for diamond owner.\"},\"setDefaultController(address)\":{\"notice\":\"Sets the controller for the factory diamond.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AssetPoolFactory/AssetPoolFactoryFacet.sol\":\"AssetPoolFactoryFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa\",\"license\":\"MIT\"},\"contracts/AssetPoolFactory/AssetPoolFactoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport '../RelayDiamond.sol';\\nimport '../IDefaultDiamond.sol';\\nimport './IAssetPoolFactory.sol';\\nimport './LibFactoryStorage.sol';\\n\\nimport 'diamond-2/contracts/libraries/LibDiamond.sol';\\n\\ncontract AssetPoolFactoryFacet is IAssetPoolFactory {\\n    /**\\n     * @notice Sets the controller for the factory diamond.\\n     * @param _controller Address of the diamond controller.\\n     */\\n    function setDefaultController(address _controller) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactoryStorage.s().defaultController = _controller;\\n    }\\n\\n    /**\\n     * @notice Registers a pool address in the internal register. Only accessible for diamond owner.\\n     * @param _pool Address of pool that should be registered.\\n     */\\n    function registerAssetPool(address _pool) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactoryStorage.Data storage s = LibFactoryStorage.s();\\n        s.assetPools.push(_pool);\\n        s.isAssetPool[_pool] = true;\\n        emit AssetPoolRegistered(_pool);\\n    }\\n\\n    function isAssetPool(address _pool) external view override returns (bool) {\\n        LibFactoryStorage.Data storage s = LibFactoryStorage.s();\\n        return s.isAssetPool[_pool];\\n    }\\n\\n    /**\\n     * @notice Deploys and stores the reference to an asset pool based on the current defaultCut.\\n     * @dev Transfers ownership to the controller and initializes access control.\\n     * @param _facets Asset Pool facets for the factory diamond to deploy.\\n     * @param _registry Registry address to point the pool to.\\n     */\\n    function deployAssetPool(IDiamondCut.FacetCut[] memory _facets, address _registry) external override {\\n        require(_registry != address(0), 'NO_REGISTRY');\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactoryStorage.Data storage s = LibFactoryStorage.s();\\n        //direct is required for the initialize functions below\\n        RelayDiamond d = new RelayDiamond(_facets, address(this));\\n        IDefaultDiamond assetPool = IDefaultDiamond(address(d));\\n\\n        assetPool.setPoolRegistry(_registry);\\n        assetPool.transferOwnership(s.defaultController);\\n        assetPool.initializeRoles(s.defaultController);\\n\\n        s.assetPools.push(address(d));\\n        s.isAssetPool[address(d)] = true;\\n        emit AssetPoolDeployed(address(d));\\n    }\\n}\\n\",\"keccak256\":\"0xeee5efc2f1d1dc94ca8db60fe9d1680813d3c6c98090b06913c2f777330cdc75\",\"license\":\"Apache-2.0\"},\"contracts/AssetPoolFactory/IAssetPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport 'diamond-2/contracts/interfaces/IDiamondCut.sol';\\n\\ninterface IAssetPoolFactory {\\n    event AssetPoolDeployed(address assetPool);\\n    event AssetPoolRegistered(address assetPool);\\n\\n    function setDefaultController(address _controller) external;\\n\\n    function registerAssetPool(address _pool) external;\\n\\n    function isAssetPool(address _pool) external view returns (bool);\\n\\n    function deployAssetPool(IDiamondCut.FacetCut[] memory _facets, address _registry) external;\\n}\\n\",\"keccak256\":\"0xef5f9b723ea4ef2e432c6af25909564ca2b5bbaedb96756e8f34c0b96545b15b\",\"license\":\"Apache-2.0\"},\"contracts/AssetPoolFactory/LibFactoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport 'diamond-2/contracts/interfaces/IDiamondCut.sol';\\n\\nlibrary LibFactoryStorage {\\n    bytes32 constant FACTORY_STORAGE_POSITION = keccak256('diamond.standard.poolfactory.storage');\\n\\n    struct Data {\\n        address defaultController;\\n        address[] assetPools;\\n        mapping(address => bool) isAssetPool;\\n        IDiamondCut.FacetCut[] defaultCut;\\n    }\\n\\n    function s() internal pure returns (Data storage bs) {\\n        bytes32 position = FACTORY_STORAGE_POSITION;\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x128c75d0dab5b4f799bdfa143d3f526793a157a627f81cce21255fb02869d267\",\"license\":\"Apache-2.0\"},\"contracts/IDefaultDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport 'diamond-2/contracts/interfaces/IERC173.sol';\\nimport 'diamond-2/contracts/interfaces/IDiamondLoupe.sol';\\nimport 'diamond-2/contracts/interfaces/IDiamondCut.sol';\\nimport './TMP/TMP1/IAccessControl.sol';\\nimport './TMP/TMP1/IAccessControlEvents.sol';\\nimport './TMP/TMP2/IMemberID.sol';\\nimport './TMP/TMP3/IPoolRoles.sol';\\nimport './TMP/TMP5/IToken.sol';\\nimport './TMP/TMP6/IBasePoll.sol';\\nimport './TMP/TMP7/IWithdraw.sol';\\nimport './TMP/TMP7/IWithdrawPoll.sol';\\nimport './TMP/TMP7/IWithdrawPollProxy.sol';\\nimport './TMP/TMP8/IReward.sol';\\nimport './TMP/TMP8/IRewardPoll.sol';\\nimport './TMP/TMP8/IRewardPollProxy.sol';\\nimport './TMP/TMP9/IRelayHub.sol';\\n\\ninterface IDefaultDiamond is\\n    IERC173,\\n    IDiamondLoupe,\\n    IDiamondCut,\\n    IAccessControl,\\n    IAccessControlEvents,\\n    IMemberID,\\n    IPoolRoles,\\n    IToken,\\n    IBasePoll,\\n    IWithdraw,\\n    IWithdrawPoll,\\n    IWithdrawPollProxy,\\n    IReward,\\n    IRewardPoll,\\n    IRewardPollProxy,\\n    IRelayHub\\n{\\n    function setupMockAccess(bytes32[] memory roles, address[] memory addr) external;\\n}\\n\",\"keccak256\":\"0xf0c07917209901eb981fd2318431a0d09c27fba0f0270db95c321e414e759b62\",\"license\":\"Apache-2.0\"},\"contracts/RelayDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport 'diamond-2/contracts/libraries/LibDiamond.sol';\\nimport 'diamond-2/contracts/interfaces/IDiamondLoupe.sol';\\nimport 'diamond-2/contracts/interfaces/IDiamondCut.sol';\\nimport 'diamond-2/contracts/interfaces/IERC173.sol';\\nimport 'diamond-2/contracts/interfaces/IERC165.sol';\\n\\ncontract RelayDiamond {\\n    constructor(IDiamondCut.FacetCut[] memory _diamondCut, address _owner) payable {\\n        LibDiamond.diamondCut(_diamondCut, address(0), new bytes(0));\\n        LibDiamond.setContractOwner(_owner);\\n\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n\\n        // adding ERC165 data\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamond.DiamondStorage storage ds;\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n        address facet = address(bytes20(ds.facets[msg.sig]));\\n\\n        require(facet != address(0), 'Diamond: Function does not exist');\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            if eq(caller(), address()) {\\n                let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n                returndatacopy(0, 0, returndatasize())\\n                switch result\\n                    case 0 {\\n                        revert(0, returndatasize())\\n                    }\\n                    default {\\n                        return(0, returndatasize())\\n                    }\\n            }\\n            {\\n                mstore(calldatasize(), caller())\\n                let result := delegatecall(gas(), facet, 0, add(calldatasize(), 0x20), 0, 0)\\n                returndatacopy(0, 0, returndatasize())\\n                switch result\\n                    case 0 {\\n                        revert(0, returndatasize())\\n                    }\\n                    default {\\n                        return(0, returndatasize())\\n                    }\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xa9b8bf03443553ae655f41e6ff8338abb889fa59f115700699ad8520b501e6d1\",\"license\":\"MIT\"},\"contracts/TMP/TMP1/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x19b0c7e6635833c346ea76e6aead0046d78cbe1434b4799075c9cdd0024ad219\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP1/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IAccessControlEvents {\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\\n\",\"keccak256\":\"0x861e728dd47fece4a3be7f9581be8192efa7bdd135ad4c71b977786d09cfe070\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP2/IMemberID.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IMemberID {\\n    event MemberAddressChanged(uint256 indexed memberID, address indexed previousAddress, address indexed newAddress);\\n\\n    function upgradeAddress(address _oldAddress, address _newAddress) external;\\n\\n    function getAddressByMember(uint256 _member) external view returns (address);\\n\\n    function getMemberByAddress(address _address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9f28c8a3ebc035329782e9ebf1046faae7ae4d72dda5b5a4284420129f234cd2\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP3/IPoolRoles.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IPoolRoles {\\n    function initializeRoles(address _owner) external;\\n\\n    function isMember(address _account) external view returns (bool);\\n\\n    function addMember(address _account) external;\\n\\n    function removeMember(address _account) external;\\n\\n    function isManager(address _account) external view returns (bool);\\n\\n    function addManager(address _account) external;\\n\\n    function removeManager(address _account) external;\\n\\n    function isManagerRoleAdmin(address _account) external view returns (bool);\\n\\n    function isMemberRoleAdmin(address _account) external view returns (bool);\\n\\n    function getOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe2889fb87c96d6070310bc8aeabe05a30183d0af418c8d3e960be35d05eb0ca5\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP5/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IToken {\\n    event TokenUpdated(address old, address current);\\n    event RegistryUpdated(address old, address current);\\n    event DepositFeeCollected(uint256 fee);\\n    event Depositted(address sender, uint256 amount);\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function setPoolRegistry(address _registry) external;\\n\\n    function getPoolRegistry() external view returns (address);\\n\\n    function addToken(address _token) external;\\n\\n    function getToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xec898ebd690facec197b974f292f91fecbc0dee72d659d38628940f69a6d68b7\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP6/IBasePoll.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport './LibBasePollStorage.sol';\\n\\ninterface IBasePoll {\\n    function getStartTime(uint256 _id) external view returns (uint256);\\n\\n    function getEndTime(uint256 _id) external view returns (uint256);\\n\\n    function getYesCounter(uint256 _id) external view returns (uint256);\\n\\n    function getNoCounter(uint256 _id) external view returns (uint256);\\n\\n    function getTotalVoted(uint256 _id) external view returns (uint256);\\n\\n    function getVoteByAddress(uint256 _id, address _address) external view returns (LibBasePollStorage.Vote memory);\\n}\\n\",\"keccak256\":\"0x6525cee2a0b563088294d0b2be61a1af34ce482ee5fe4a21eec68590025947ec\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP6/LibBasePollStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\n/// @dev This Lib is used to create unique storage pointers and store structured data in them.\\nlibrary LibBasePollStorage {\\n    bytes32 constant BASE_STORAGE = keccak256('diamond.contract.assetpool.basepoll');\\n\\n    /**\\n     * @dev Stores the amount of polls created in the diamond.\\n     */\\n    struct BaseStorage {\\n        uint256 pollCounter;\\n    }\\n\\n    /**\\n     * @dev Stores the information of a poll for a given storage pointer.\\n     */\\n    struct BasePollStorage {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 yesCounter;\\n        uint256 noCounter;\\n        uint256 totalVoted;\\n        mapping(address => Vote) votesByAddress;\\n    }\\n    /**\\n     * @dev Stores a vote for a poll in BasePollStorage.votesByAddress.\\n     */\\n    struct Vote {\\n        uint256 time;\\n        uint256 weight;\\n        bool agree;\\n    }\\n\\n    /**\\n     * @param _id The ID of a poll.\\n     * @return storage position for a given poll id\\n     */\\n    function getPosition(uint256 _id) internal pure returns (bytes32) {\\n        return keccak256(abi.encode('diamond.contract.assetpool.basepoll', _id));\\n    }\\n\\n    /**\\n     * @return bs The base storage containing pollCounter of all polls.\\n     */\\n    function baseStorage() internal pure returns (BaseStorage storage bs) {\\n        bytes32 position = BASE_STORAGE;\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @param _pos The storage position of the poll.\\n     * @return bs The BasePollStorage struct storage for a poll its storage position.\\n     */\\n    function basePollStorage(bytes32 _pos) internal pure returns (BasePollStorage storage bs) {\\n        assembly {\\n            bs.slot := _pos\\n        }\\n    }\\n\\n    /**\\n     * @param _id The poll id\\n     * @return bs The BasePollStorage struct storage for a given poll ID.\\n     */\\n    function basePollStorageId(uint256 _id) internal pure returns (BasePollStorage storage bs) {\\n        bytes32 position = getPosition(_id);\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf6a461ca59db0d5227af09886b0e7f9280f119ad25ad78ed553868ff8331696d\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP7/IWithdraw.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWithdraw {\\n    event WithdrawPollCreated(uint256 id, uint256 indexed member);\\n\\n    function proposeWithdraw(uint256 _amount, address _beneficiary) external;\\n\\n    function setProposeWithdrawPollDuration(uint256 _duration) external;\\n\\n    function getProposeWithdrawPollDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdde485a50730fdab2c1eda3ab8f48c01a08125b3d303513adf4dc1608e19e1f2\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP7/IWithdrawPoll.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWithdrawPoll {\\n    event Withdrawn(uint256 id, address indexed member, uint256 reward);\\n    event WithdrawPollVoted(uint256 id, address indexed member, bool vote);\\n    event WithdrawPollFinalized(uint256 id, bool approved);\\n    event WithdrawPollRevokedVote(uint256 id, address indexed member);\\n    event WithdrawFeeCollected(uint256 fee);\\n\\n    function getBeneficiary(uint256 _id) external view returns (uint256);\\n\\n    function getAmount(uint256 _id) external view returns (uint256);\\n\\n    function _withdrawPollVote(bool _agree) external;\\n\\n    function _withdrawPollRevokeVote() external;\\n\\n    function _withdrawPollFinalize() external;\\n\\n    function _withdrawPollApprovalState() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8f7e546637481b06636cddcfd7d18ac3748d0f92088d5be97f37779e107df699\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP7/IWithdrawPollProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IWithdrawPollProxy {\\n    function withdrawPollVote(uint256 _id, bool _agree) external;\\n\\n    function withdrawPollRevokeVote(uint256 _id) external;\\n\\n    function withdrawPollFinalize(uint256 _id) external;\\n\\n    function withdrawPollApprovalState(uint256 _id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x038ec2833d02ffa3561dc0ea49fc728c2692a9caee5f152f1a39477c1e356e67\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP8/IReward.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport './LibRewardPollStorage.sol';\\n\\ninterface IReward {\\n    event RewardPollCreated(uint256 id, address indexed member, uint256 rewardID, uint256 proposal);\\n\\n    function setRewardPollDuration(uint256 _duration) external;\\n\\n    function getRewardPollDuration() external view returns (uint256);\\n\\n    function addReward(uint256 _withdrawAmount, uint256 _withdrawDuration) external;\\n\\n    function getReward(uint256 _id) external view returns (LibRewardPollStorage.Reward memory);\\n\\n    function updateReward(\\n        uint256 _id,\\n        uint256 _withdrawAmount,\\n        uint256 _withdrawDuration\\n    ) external;\\n\\n    function enableReward(uint256 _id) external;\\n\\n    function disableReward(uint256 _id) external;\\n\\n    function claimRewardFor(uint256 _id, address _beneficiary) external;\\n\\n    function claimReward(uint256 _id) external;\\n}\\n\",\"keccak256\":\"0xba6c95371305b773b812f2c6c367af1a5d42a71f09cb159bd7ad48d96fa7dbd1\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP8/IRewardPoll.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IRewardPoll {\\n    event RewardPollDisabled(uint256 id);\\n    event RewardPollEnabled(uint256 id);\\n    event RewardPollUpdated(uint256 id, uint256 amount, uint256 duration);\\n    event RewardPollVoted(uint256 id, address indexed member, bool vote);\\n    event RewardPollFinalized(uint256 id, bool approved);\\n    event RewardPollRevokedVote(uint256 id, address indexed member);\\n\\n    function getWithdrawAmount(uint256 _id) external view returns (uint256);\\n\\n    function getWithdrawDuration(uint256 _id) external view returns (uint256);\\n\\n    function getRewardIndex(uint256 _id) external view returns (uint256);\\n\\n    function _rewardPollVote(bool _agree) external;\\n\\n    function _rewardPollRevokeVote() external;\\n\\n    function _rewardPollFinalize() external;\\n\\n    function _rewardPollApprovalState() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa6cb57a27c632992ae7e54123b433f32d48229bda833fb3b1394c6e5613c4492\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP8/IRewardPollProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IRewardPollProxy {\\n    function rewardPollVote(uint256 _id, bool _agree) external;\\n\\n    function rewardPollRevokeVote(uint256 _id) external;\\n\\n    function rewardPollFinalize(uint256 _id) external;\\n\\n    function rewardPollApprovalState(uint256 _id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x709b747171757cf299ebefb7939f29dd8a8a2dcb7bb30290469a9651de1c8259\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP8/LibRewardPollStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\nlibrary LibRewardPollStorage {\\n    bytes32 constant REWARD_STORAGE = keccak256('diamond.contract.assetpool.rewardpoll');\\n\\n    struct RewardStorage {\\n        uint256 rewardPollDuration;\\n        Reward[] rewards;\\n    }\\n\\n    enum RewardState { Disabled, Enabled }\\n\\n    struct Reward {\\n        uint256 id;\\n        uint256 withdrawAmount;\\n        uint256 withdrawDuration;\\n        uint256 pollId;\\n        RewardState state;\\n    }\\n\\n    function rewardStorage() internal pure returns (RewardStorage storage rs) {\\n        bytes32 position = REWARD_STORAGE;\\n        assembly {\\n            rs.slot := position\\n        }\\n    }\\n\\n    struct RewardPollStorage {\\n        uint256 rewardIndex;\\n        uint256 withdrawAmount;\\n        uint256 withdrawDuration;\\n    }\\n\\n    function getPosition(uint256 _id) internal pure returns (bytes32) {\\n        return keccak256(abi.encode('diamond.contract.assetpool.rewardpoll', _id));\\n    }\\n\\n    function rewardPollStorage(bytes32 _pos) internal pure returns (RewardPollStorage storage rs) {\\n        assembly {\\n            rs.slot := _pos\\n        }\\n    }\\n\\n    function rewardPollStorageId(uint256 _id) internal pure returns (RewardPollStorage storage rs) {\\n        bytes32 position = getPosition(_id);\\n        assembly {\\n            rs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7bbd6550953d50a1e1de75ab366749fda7eef9883c810dc4c931cf068a1d1512\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP9/IRelayHub.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IRelayHub {\\n    event Result(bool success, bytes data);\\n\\n    function getLatestNonce(address _signer) external view returns (uint256);\\n\\n    function call(\\n        bytes calldata _call,\\n        uint256 _nonce,\\n        bytes memory _sig\\n    ) external;\\n}\\n\",\"keccak256\":\"0x68e89ec7ac192e899c9436b544ff4ab524d7e0b0f6281f28c1115a85694a3636\",\"license\":\"Apache-2.0\"},\"diamond-2/contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x19c92fe16028a8e74a5f1914235b3e7f4e5eafbc5fced9fa345cab5cd4644c0c\",\"license\":\"MIT\"},\"diamond-2/contracts/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x2bf203d5f1fd4f94f7d0de38d664d07126245c9bc434cd15863b2aa6a27cc707\",\"license\":\"MIT\"},\"diamond-2/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc19b99fbeaeb943b6d12e6d631b6ae1738aaa498ee49f67caaccc6238fd0d458\",\"license\":\"MIT\"},\"diamond-2/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xbd57ffc856416d3ba942ac7b547eb9626c631d5fe2386ccf134b4c473b3d8705\",\"license\":\"MIT\"},\"diamond-2/contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* This is gas optimized by reducing storage reads and storage writes.\\n* This code is as complex as it is to reduce gas costs.\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // owner of the contract\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n        _;\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            // get last selectorSlot\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                uint256 selectorInSlotPosition = (_selectorCount % 8) * 32;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    ds.selectorSlots[_selectorCount / 8] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Replace facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            uint256 selectorSlotCount = _selectorCount / 8;\\n            uint256 selectorInSlotIndex = (_selectorCount % 8) - 1;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex * 32));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount / 8;\\n                    oldSelectorInSlotPosition = (oldSelectorCount % 8) * 32;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n                selectorInSlotIndex--;\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex + 1;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x8f7751980297b63c26a4cf8d7830ba82befde6a07b6a179115985c8d04d6b3cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deployAssetPool((address,uint8,bytes4[])[],address)": {
        "details": "Transfers ownership to the controller and initializes access control.",
        "params": {
          "_facets": "Asset Pool facets for the factory diamond to deploy.",
          "_registry": "Registry address to point the pool to."
        }
      },
      "registerAssetPool(address)": {
        "params": {
          "_pool": "Address of pool that should be registered."
        }
      },
      "setDefaultController(address)": {
        "params": {
          "_controller": "Address of the diamond controller."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployAssetPool((address,uint8,bytes4[])[],address)": {
        "notice": "Deploys and stores the reference to an asset pool based on the current defaultCut."
      },
      "registerAssetPool(address)": {
        "notice": "Registers a pool address in the internal register. Only accessible for diamond owner."
      },
      "setDefaultController(address)": {
        "notice": "Sets the controller for the factory diamond."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}