{
  "address": "0x3181E46aCc0A1D4affd6Ae21E26EAb133D6c0660",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "member",
          "type": "uint256"
        }
      ],
      "name": "WithdrawPollCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getProposeWithdrawPollDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_unlockDates",
          "type": "uint256[]"
        }
      ],
      "name": "proposeBulkWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_unlockDate",
          "type": "uint256"
        }
      ],
      "name": "proposeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setProposeWithdrawPollDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2befb036e1a18a04209c34507edb2fea2de4df810ceb9f4e05eaf052aa373f4f",
  "receipt": {
    "to": null,
    "from": "0x90819DA17aF39E9791c29a1Cba8819b1084d775a",
    "contractAddress": "0x3181E46aCc0A1D4affd6Ae21E26EAb133D6c0660",
    "transactionIndex": 52,
    "gasUsed": "642297",
    "logsBloom": "0x
    "blockHash": "0xb6615f0c01beec900366e642f1c9062d1def27f0f9e3330ea5f2dc01ac9efd5f",
    "transactionHash": "0x2befb036e1a18a04209c34507edb2fea2de4df810ceb9f4e05eaf052aa373f4f",
    "logs": [
      {
        "transactionIndex": 52,
        "blockNumber": 27554699,
        "transactionHash": "0x2befb036e1a18a04209c34507edb2fea2de4df810ceb9f4e05eaf052aa373f4f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000090819da17af39e9791c29a1cba8819b1084d775a",
          "0x000000000000000000000000bc6044f4a1688d8b8596a9f7d4659e09985eebe6"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000464c35aefaca27000000000000000000000000000000000000000000000005ab5561842efa3472000000000000000000000000000000000000000000002fb2e89fe0ad80fa8fe1000000000000000000000000000000000000000000000005ab0f154e7fff6a4b000000000000000000000000000000000000000000002fb2e8e62ce32ff55a08",
        "logIndex": 180,
        "blockHash": "0xb6615f0c01beec900366e642f1c9062d1def27f0f9e3330ea5f2dc01ac9efd5f"
      }
    ],
    "blockNumber": 27554699,
    "cumulativeGasUsed": "7310865",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "cebe2585b2819621b374dccebde02691",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"member\",\"type\":\"uint256\"}],\"name\":\"WithdrawPollCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getProposeWithdrawPollDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockDates\",\"type\":\"uint256[]\"}],\"name\":\"proposeBulkWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"}],\"name\":\"proposeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setProposeWithdrawPollDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getProposeWithdrawPollDuration()\":{\"returns\":{\"_0\":\"default duration in seconds for polls for proposed withdrawals.\"}},\"proposeBulkWithdraw(uint256[],address[],uint256[])\":{\"params\":{\"_amounts\":\"Sizes of the proposed withdrawal.\",\"_beneficiaries\":\"Beneficiaries of the reward.\",\"_unlockDates\":\"Dates beyond which it will be possible to withdraw\"}},\"proposeWithdraw(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Size of the proposed withdrawal.\",\"_beneficiary\":\"Beneficiary of the reward.\",\"_unlockDate\":\"Date beyond which it will be possible to withdraw\"}},\"setProposeWithdrawPollDuration(uint256)\":{\"params\":{\"_duration\":\"Default duration of the poll for proposed withdrawals.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"proposeBulkWithdraw(uint256[],address[],uint256[])\":{\"notice\":\"Proposes a withdraw poll with the default withdrawPollDuration in bulk.\"},\"proposeWithdraw(uint256,address,uint256)\":{\"notice\":\"Proposes a withdraw poll with the default withdrawPollDuration.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/09-WithdrawBypass/WithdrawBy.sol\":\"WithdrawBy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2\",\"license\":\"MIT\"},\"contracts/05-Withdraw/Withdraw.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* @title Withdraw Proposal\\n* @author Evert Kors <evert@thx.network>\\n* @notice Create and propose withdrawals.\\n* \\n* Implementations: \\n* TMP-7 Withdrawals: https://github.com/thxprotocol/modules/issues/7\\n* \\n* Dependencies:\\n* TMP-6 Base Poll: https://github.com/thxprotocol/modules/issues/6\\n* TMP-2 Member Control: https://github.com/thxprotocol/modules/issues/2\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport 'diamond-2/contracts/libraries/LibDiamond.sol';\\n\\n// Implements\\nimport '../TMP/TMP7/IWithdraw.sol';\\nimport '../TMP/TMP7/LibWithdrawPollStorage.sol';\\n\\n// Depends on\\nimport '../TMP/TMP6/LibBasePollStorage.sol';\\nimport '../TMP/TMP2/LibMemberAccessStorage.sol';\\nimport '../util/Access.sol'; // TMP 1\\n\\ncontract Withdraw is Access, IWithdraw {\\n    /**\\n     * @notice Proposes a withdraw poll with the default withdrawPollDuration.\\n     * @param _amount Size of the proposed withdrawal.\\n     * @param _beneficiary Beneficiary of the reward.\\n     * @param _unlockDate Date beyond which it will be possible to withdraw\\n     */\\n    function proposeWithdraw(\\n        uint256 _amount,\\n        address _beneficiary,\\n        uint256 _unlockDate\\n    ) external override onlyOwner {\\n        require(_amount != 0, 'NOT_VALID');\\n\\n        _createWithdrawPoll(\\n            _amount,\\n            LibWithdrawPollStorage.withdrawStorage().proposeWithdrawPollDuration,\\n            _beneficiary,\\n            _unlockDate\\n        );\\n    }\\n\\n    /**\\n     * @notice Proposes a withdraw poll with the default withdrawPollDuration in bulk.\\n     * @param _amounts Sizes of the proposed withdrawal.\\n     * @param _beneficiaries Beneficiaries of the reward.\\n     * @param _unlockDates Dates beyond which it will be possible to withdraw\\n     */\\n    function proposeBulkWithdraw(\\n        uint256[] memory _amounts,\\n        address[] memory _beneficiaries,\\n        uint256[] memory _unlockDates\\n    ) external override onlyOwner {\\n        require(_amounts.length != 0, 'INVALID_INPUT');\\n        require(_beneficiaries.length != 0, 'INVALID_INPUT');\\n        require(_amounts.length == _beneficiaries.length, 'INVALID_INPUT');\\n\\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\\n            require(_amounts[i] != 0, 'NOT_VALID');\\n            require(_beneficiaries[i] != address(0), 'NOT_VALID');\\n            _createWithdrawPoll(\\n                _amounts[i],\\n                LibWithdrawPollStorage.withdrawStorage().proposeWithdrawPollDuration,\\n                _beneficiaries[i],\\n                _unlockDates[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Starts a withdraw poll.\\n     * @param _amount Size of the withdrawal.\\n     * @param _duration The duration the withdraw poll.\\n     * @param _beneficiary Beneficiary of the reward.\\n     * @param _unlockDate Date beyond which it will be possible to withdraw\\n     */\\n    function _createWithdrawPoll(\\n        uint256 _amount,\\n        uint256 _duration,\\n        address _beneficiary,\\n        uint256 _unlockDate\\n    ) internal returns (uint256) {\\n        LibBasePollStorage.BaseStorage storage bst = LibBasePollStorage.baseStorage();\\n        bst.pollCounter = bst.pollCounter + 1;\\n\\n        LibBasePollStorage.BasePollStorage storage baseStorage = LibBasePollStorage.basePollStorageId(bst.pollCounter);\\n        baseStorage.id = bst.pollCounter;\\n        baseStorage.startTime = block.timestamp;\\n        baseStorage.endTime = block.timestamp + _duration;\\n\\n        LibWithdrawPollStorage.WithdrawPollStorage storage wpStorage =\\n            LibWithdrawPollStorage.withdrawPollStorageId(bst.pollCounter);\\n\\n        LibMemberAccessStorage.MemberStorage storage ms = LibMemberAccessStorage.memberStorage();\\n        if (!_hasRole(MEMBER_ROLE, _beneficiary)) {\\n            ms.memberCounter += 1;\\n            ms.addressToMember[_beneficiary] = ms.memberCounter;\\n            ms.memberToAddress[ms.memberCounter] = _beneficiary;\\n            _grantRole(MEMBER_ROLE, _beneficiary);\\n        }\\n\\n        wpStorage.beneficiary = ms.addressToMember[_beneficiary];\\n        wpStorage.amount = _amount;\\n        wpStorage.unlockDate = _unlockDate;\\n\\n        emit WithdrawPollCreated(bst.pollCounter, wpStorage.beneficiary);\\n    }\\n\\n    /**\\n     * @param _duration Default duration of the poll for proposed withdrawals.\\n     */\\n    function setProposeWithdrawPollDuration(uint256 _duration) external override onlyManager {\\n        LibWithdrawPollStorage.withdrawStorage().proposeWithdrawPollDuration = _duration;\\n    }\\n\\n    /**\\n     * @return default duration in seconds for polls for proposed withdrawals.\\n     */\\n    function getProposeWithdrawPollDuration() external view override returns (uint256) {\\n        return LibWithdrawPollStorage.withdrawStorage().proposeWithdrawPollDuration;\\n    }\\n}\\n\",\"keccak256\":\"0xafb012b05be604076f32825137035ae5ea4f6cf85cc12927cc01482dcb05f91d\",\"license\":\"Apache-2.0\"},\"contracts/09-WithdrawBypass/WithdrawBy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* @title Withdrawals (Bypass poll)\\n* @author Evert Kors <evert@thx.network>\\n* @dev Inherits default withdraw implementation\\n* \\n* Implementations: \\n* TMP-7 Withdrawals: https://github.com/thxprotocol/modules/issues/7\\n/******************************************************************************/\\n\\nimport '../05-Withdraw/Withdraw.sol';\\n\\ncontract WithdrawBy is Withdraw {}\\n\",\"keccak256\":\"0xf330200422b28ec212e446cf845f976cf387c7e3710756308629e3a8ddf63a40\",\"license\":\"Apache-2.0\"},\"contracts/TMP/RelayReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/GSNRecipient.sol\\n// But kept minimalist.\\ncontract RelayReceiver {\\n    function _msgSender() internal pure returns (address payable result) {\\n        // If not call from RelayHub, return original sender\\n        // We need to read 20 bytes (an address) located at array index msg.data.length - 20. In memory, the array\\n        // is prefixed with a 32-byte length value, so we first add 32 to get the memory read index. However, doing\\n        // so would leave the address in the upper 20 bytes of the 32-byte word, which is inconvenient and would\\n        // require bit shifting. We therefore subtract 12 from the read index so the address lands on the lower 20\\n        // bytes. This can always be done due to the 32-byte prefix.\\n\\n        // The final memory read index is msg.data.length - 20 + 32 - 12 = msg.data.length. Using inline assembly is the\\n        // easiest/most-efficient way to perform this operation.\\n\\n        // These fields are not accessible from assembly\\n        bytes memory array = msg.data;\\n        uint256 index = msg.data.length;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n            result := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x389a8fb5beb19d72205c811e0af13ca5ce2ab019e0b8ef70ce209d4876783e57\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP1/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\ninterface IAccessControlEvents {\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\\n\",\"keccak256\":\"0x861e728dd47fece4a3be7f9581be8192efa7bdd135ad4c71b977786d09cfe070\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP1/LibAccessStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\n\\nlibrary LibAccessStorage {\\n    // TODO test with conflicting storage (with other pools)\\n    // set storage pointer based upon assigned id (by factory)\\n\\n    bytes32 constant ACCESS_STORAGE_POSITION = keccak256('diamond.standard.access.storage');\\n\\n    struct RoleStorage {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    function roleStorage() internal pure returns (RoleStorage storage rs) {\\n        bytes32 position = ACCESS_STORAGE_POSITION;\\n        assembly {\\n            rs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b263026cf31b69957c414757a12ec6a3f30eda70155342941039a5864f9283b\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP2/LibMemberAccessStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\nlibrary LibMemberAccessStorage {\\n    bytes32 constant MEMBER_ACCESS_STORAGE_POSITION = keccak256('diamond.standard.member.access.storage');\\n\\n    struct MemberStorage {\\n        uint256 memberCounter;\\n        mapping(address => uint256) addressToMember;\\n        mapping(uint256 => address) memberToAddress;\\n    }\\n\\n    function memberStorage() internal pure returns (MemberStorage storage rs) {\\n        bytes32 position = MEMBER_ACCESS_STORAGE_POSITION;\\n        assembly {\\n            rs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x20f2ae8102598623a0bf072a422ca0fa0edca86232d653f7ace0beb88762cc7a\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP6/LibBasePollStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\n/// @dev This Lib is used to create unique storage pointers and store structured data in them.\\nlibrary LibBasePollStorage {\\n    bytes32 constant BASE_STORAGE = keccak256('diamond.contract.assetpool.basepoll');\\n\\n    /**\\n     * @dev Stores the amount of polls created in the diamond.\\n     */\\n    struct BaseStorage {\\n        uint256 pollCounter;\\n    }\\n\\n    /**\\n     * @dev Stores the information of a poll for a given storage pointer.\\n     */\\n    struct BasePollStorage {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 yesCounter;\\n        uint256 noCounter;\\n        uint256 totalVoted;\\n        mapping(address => Vote) votesByAddress;\\n    }\\n    /**\\n     * @dev Stores a vote for a poll in BasePollStorage.votesByAddress.\\n     */\\n    struct Vote {\\n        uint256 time;\\n        uint256 weight;\\n        bool agree;\\n    }\\n\\n    /**\\n     * @param _id The ID of a poll.\\n     * @return storage position for a given poll id\\n     */\\n    function getPosition(uint256 _id) internal pure returns (bytes32) {\\n        return keccak256(abi.encode('diamond.contract.assetpool.basepoll', _id));\\n    }\\n\\n    /**\\n     * @return bs The base storage containing pollCounter of all polls.\\n     */\\n    function baseStorage() internal pure returns (BaseStorage storage bs) {\\n        bytes32 position = BASE_STORAGE;\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @param _pos The storage position of the poll.\\n     * @return bs The BasePollStorage struct storage for a poll its storage position.\\n     */\\n    function basePollStorage(bytes32 _pos) internal pure returns (BasePollStorage storage bs) {\\n        assembly {\\n            bs.slot := _pos\\n        }\\n    }\\n\\n    /**\\n     * @param _id The poll id\\n     * @return bs The BasePollStorage struct storage for a given poll ID.\\n     */\\n    function basePollStorageId(uint256 _id) internal pure returns (BasePollStorage storage bs) {\\n        bytes32 position = getPosition(_id);\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf6a461ca59db0d5227af09886b0e7f9280f119ad25ad78ed553868ff8331696d\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP7/IWithdraw.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWithdraw {\\n    event WithdrawPollCreated(uint256 id, uint256 indexed member);\\n\\n    function proposeWithdraw(\\n        uint256 _amount,\\n        address _beneficiary,\\n        uint256 _unlockDate\\n    ) external;\\n\\n    function proposeBulkWithdraw(\\n        uint256[] memory _amounts,\\n        address[] memory _beneficiaries,\\n        uint256[] memory _unlockDates\\n    ) external;\\n\\n    function setProposeWithdrawPollDuration(uint256 _duration) external;\\n\\n    function getProposeWithdrawPollDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x96633f60eaaafeedd2ba063defaca8f8ea92f8d9be57f83f05514edad8fec720\",\"license\":\"Apache-2.0\"},\"contracts/TMP/TMP7/LibWithdrawPollStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.4;\\n\\nlibrary LibWithdrawPollStorage {\\n    bytes32 constant WITHDRAW_STORAGE = keccak256('diamond.contract.assetpool.withdrawpoll');\\n\\n    struct WithdrawStorage {\\n        uint256 proposeWithdrawPollDuration;\\n    }\\n\\n    function withdrawStorage() internal pure returns (WithdrawStorage storage bs) {\\n        bytes32 position = WITHDRAW_STORAGE;\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n\\n    struct WithdrawPollStorage {\\n        uint256 beneficiary;\\n        uint256 amount;\\n        uint256 unlockDate;\\n    }\\n\\n    function getPosition(uint256 _id) internal pure returns (bytes32) {\\n        return keccak256(abi.encode('diamond.contract.assetpool.withdrawpoll', _id));\\n    }\\n\\n    function withdrawPollStorage(bytes32 _pos) internal pure returns (WithdrawPollStorage storage bs) {\\n        assembly {\\n            bs.slot := _pos\\n        }\\n    }\\n\\n    function withdrawPollStorageId(uint256 _id) internal pure returns (WithdrawPollStorage storage bs) {\\n        bytes32 position = getPosition(_id);\\n        assembly {\\n            bs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf581f3e305d3276ce813bb2ae501ec327006261c2724eceaa1db0cfe3f51e5d5\",\"license\":\"Apache-2.0\"},\"contracts/util/Access.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.7.4;\\n\\n/******************************************************************************\\\\\\n* @title Access\\n* @author Evert Kors <evert@thx.network>\\n* @notice Implement role-based access control.\\n* \\n* @dev\\n* Implementations: \\n* TMP-1 Access Control: https://github.com/thxprotocol/modules/issues/1\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport 'diamond-2/contracts/libraries/LibDiamond.sol';\\n\\n// depends on\\nimport '../TMP/TMP1/IAccessControlEvents.sol';\\nimport '../TMP/TMP1/LibAccessStorage.sol';\\n\\nimport '../TMP/RelayReceiver.sol';\\n\\ncontract Access is RelayReceiver, IAccessControlEvents {\\n    //\\n    // Access control view methods internal\\n    //\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    modifier onlyOwner() {\\n        require(LibDiamond.contractOwner() == _msgSender(), 'NOT_OWNER');\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(_hasRole(MANAGER_ROLE, _msgSender()), 'NOT_MANAGER');\\n        _;\\n    }\\n\\n    modifier onlyMember() {\\n        require(_hasRole(MEMBER_ROLE, _msgSender()), 'NOT_MEMBER');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks if account bears role.\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     * @return if role member storage array contains the given account address.\\n     */\\n    function _hasRole(bytes32 role, address account) internal view virtual returns (bool) {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        return rs.roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Called in initialize methods.\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Called during initialization\\n     * @param role Bytes32 array representing the role.\\n     * @param adminRole Address of the role admin\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        emit RoleAdminChanged(role, rs.roles[role].adminRole, adminRole);\\n        rs.roles[role].adminRole = adminRole;\\n    }\\n\\n    /**\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        if (rs.roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @param role Bytes32 array representing the role.\\n     * @param account Address of the account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        LibAccessStorage.RoleStorage storage rs = LibAccessStorage.roleStorage();\\n\\n        if (rs.roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    //\\n    // Pool roles view methods internal\\n    //\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 internal constant MEMBER_ROLE = keccak256('MEMBER_ROLE');\\n    bytes32 internal constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\\n\\n    function _isManager(address _account) internal view returns (bool) {\\n        return _hasRole(MANAGER_ROLE, _account);\\n    }\\n\\n    function _isMember(address _account) internal view returns (bool) {\\n        return _hasRole(MEMBER_ROLE, _account) || _hasRole(MANAGER_ROLE, _account);\\n    }\\n\\n    function _getOwner() internal view returns (address) {\\n        return LibDiamond.contractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0xa5d725ade905d77d683ad7a2ca0d5b0eefc7f44e867544b04b6990aa6fad9297\",\"license\":\"Apache-2.0\"},\"diamond-2/contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x19c92fe16028a8e74a5f1914235b3e7f4e5eafbc5fced9fa345cab5cd4644c0c\",\"license\":\"MIT\"},\"diamond-2/contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* This is gas optimized by reducing storage reads and storage writes.\\n* This code is as complex as it is to reduce gas costs.\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // owner of the contract\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n        _;\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            // get last selectorSlot\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                uint256 selectorInSlotPosition = (_selectorCount % 8) * 32;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    ds.selectorSlots[_selectorCount / 8] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Replace facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            uint256 selectorSlotCount = _selectorCount / 8;\\n            uint256 selectorInSlotIndex = (_selectorCount % 8) - 1;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex * 32));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount / 8;\\n                    oldSelectorInSlotPosition = (oldSelectorCount % 8) * 32;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n                selectorInSlotIndex--;\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex + 1;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x8f7751980297b63c26a4cf8d7830ba82befde6a07b6a179115985c8d04d6b3cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610aa7806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806337f92d1614610051578063d19f01a214610066578063f14ad3a914610079578063ff4155eb14610097575b600080fd5b61006461005f366004610866565b6100aa565b005b610064610074366004610946565b610255565b6100816102d2565b60405161008e91906109dc565b60405180910390f35b6100646100a536600461095e565b6102e2565b6100b2610373565b6001600160a01b03166100c36103c0565b6001600160a01b03161461010a576040805162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b604482015290519081900360640190fd5b82516101315760405162461bcd60e51b815260040161012890610992565b60405180910390fd5b815161014f5760405162461bcd60e51b815260040161012890610992565b81518351146101705760405162461bcd60e51b815260040161012890610992565b60005b825181101561024f5783818151811061018857fe5b6020026020010151600014156101b05760405162461bcd60e51b8152600401610128906109b9565b60006001600160a01b03168382815181106101c757fe5b60200260200101516001600160a01b031614156101f65760405162461bcd60e51b8152600401610128906109b9565b61024684828151811061020557fe5b60200260200101516102156103dc565b6000015485848151811061022557fe5b602002602001015185858151811061023957fe5b6020026020010151610400565b50600101610173565b50505050565b6102867f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08610281610373565b610565565b6102c5576040805162461bcd60e51b815260206004820152600b60248201526a2727aa2fa6a0a720a3a2a960a91b604482015290519081900360640190fd5b806102ce6103dc565b5550565b60006102dc6103dc565b54905090565b6102ea610373565b6001600160a01b03166102fb6103c0565b6001600160a01b031614610342576040805162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b604482015290519081900360640190fd5b8261035f5760405162461bcd60e51b8152600401610128906109b9565b61024f8361036b6103dc565b548484610400565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031692915050565b60006103ca610595565b600401546001600160a01b0316919050565b7fa86131b0e9c214bb6e027183ea39a379ec2404b3693e933e1a0cd73b647fc98e90565b60008061040b6105b9565b8054600101808255909150600090610422906105dd565b825481554260018201819055870160028201558254909150600090610446906105f0565b905060006104526105fc565b905061047e7f829b824e2329e205435d941c9f13baf578548505283d29261236d8e6596d463688610565565b6104f157805460019081018083556001600160a01b038916600081815292840160209081526040808520849055928452600285019052912080546001600160a01b03191690911790556104f17f829b824e2329e205435d941c9f13baf578548505283d29261236d8e6596d463688610620565b6001600160a01b03871660009081526001808301602052604091829020548085559084018b9055600284018890558554915190917f91aa418bfd26049fe46510fca1b7593f8348efbf8e8e29a3844bb16584ff14489161055191906109dc565b60405180910390a250505050949350505050565b600080610570610698565b600085815260208290526040902090915061058b90846106bc565b9150505b92915050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b7fe9264b9da64504fcbd8e41f0f0eb90a5e885b3fe366dad83c81095d9285d25e190565b6000806105e9836106d1565b9392505050565b6000806105e98361071e565b7faa97fdeef5de5607974189e6a2429d502dcc32b43d658c3c065d5ca083ee1fab90565b600061062a610698565b6000848152602082905260409020909150610645908361076a565b1561069357610652610373565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b505050565b7f6282190449f76f72a9f692e4d8619a03764b7253394788948e36a7a57ba4a00e90565b60006105e9836001600160a01b03841661077f565b600081604051602001808060200183815260200182810382526023815260200180610a4f60239139604001925050506040516020818303038152906040528051906020012090505b919050565b600081604051602001808060200183815260200182810382526027815260200180610a286027913960400192505050604051602081830303815290604052805190602001209050919050565b60006105e9836001600160a01b038416610797565b60009081526001919091016020526040902054151590565b60006107a3838361077f565b6107d95750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561058f565b50600061058f565b80356001600160a01b038116811461071957600080fd5b600082601f830112610808578081fd5b813561081b61081682610a09565b6109e5565b81815291506020808301908481018184028601820187101561083c57600080fd5b60005b8481101561085b5781358452928201929082019060010161083f565b505050505092915050565b60008060006060848603121561087a578283fd5b833567ffffffffffffffff80821115610891578485fd5b61089d878388016107f8565b94506020915081860135818111156108b3578485fd5b8601601f810188136108c3578485fd5b80356108d161081682610a09565b81815284810190838601868402850187018c10156108ed578889fd5b8894505b8385101561091657610902816107e1565b8352600194909401939186019186016108f1565b509650505050604086013591508082111561092f578283fd5b5061093c868287016107f8565b9150509250925092565b600060208284031215610957578081fd5b5035919050565b600080600060608486031215610972578283fd5b83359250610982602085016107e1565b9150604084013590509250925092565b6020808252600d908201526c1253959053125117d253941555609a1b604082015260600190565b6020808252600990820152681393d517d59053125160ba1b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715610a0157fe5b604052919050565b600067ffffffffffffffff821115610a1d57fe5b506020908102019056fe6469616d6f6e642e636f6e74726163742e6173736574706f6f6c2e7769746864726177706f6c6c6469616d6f6e642e636f6e74726163742e6173736574706f6f6c2e62617365706f6c6ca2646970667358221220274f098d7f15d3ec84066a44b8850d41baddea990d0b566ef897caee4981f0ec64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806337f92d1614610051578063d19f01a214610066578063f14ad3a914610079578063ff4155eb14610097575b600080fd5b61006461005f366004610866565b6100aa565b005b610064610074366004610946565b610255565b6100816102d2565b60405161008e91906109dc565b60405180910390f35b6100646100a536600461095e565b6102e2565b6100b2610373565b6001600160a01b03166100c36103c0565b6001600160a01b03161461010a576040805162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b604482015290519081900360640190fd5b82516101315760405162461bcd60e51b815260040161012890610992565b60405180910390fd5b815161014f5760405162461bcd60e51b815260040161012890610992565b81518351146101705760405162461bcd60e51b815260040161012890610992565b60005b825181101561024f5783818151811061018857fe5b6020026020010151600014156101b05760405162461bcd60e51b8152600401610128906109b9565b60006001600160a01b03168382815181106101c757fe5b60200260200101516001600160a01b031614156101f65760405162461bcd60e51b8152600401610128906109b9565b61024684828151811061020557fe5b60200260200101516102156103dc565b6000015485848151811061022557fe5b602002602001015185858151811061023957fe5b6020026020010151610400565b50600101610173565b50505050565b6102867f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08610281610373565b610565565b6102c5576040805162461bcd60e51b815260206004820152600b60248201526a2727aa2fa6a0a720a3a2a960a91b604482015290519081900360640190fd5b806102ce6103dc565b5550565b60006102dc6103dc565b54905090565b6102ea610373565b6001600160a01b03166102fb6103c0565b6001600160a01b031614610342576040805162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b604482015290519081900360640190fd5b8261035f5760405162461bcd60e51b8152600401610128906109b9565b61024f8361036b6103dc565b548484610400565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031692915050565b60006103ca610595565b600401546001600160a01b0316919050565b7fa86131b0e9c214bb6e027183ea39a379ec2404b3693e933e1a0cd73b647fc98e90565b60008061040b6105b9565b8054600101808255909150600090610422906105dd565b825481554260018201819055870160028201558254909150600090610446906105f0565b905060006104526105fc565b905061047e7f829b824e2329e205435d941c9f13baf578548505283d29261236d8e6596d463688610565565b6104f157805460019081018083556001600160a01b038916600081815292840160209081526040808520849055928452600285019052912080546001600160a01b03191690911790556104f17f829b824e2329e205435d941c9f13baf578548505283d29261236d8e6596d463688610620565b6001600160a01b03871660009081526001808301602052604091829020548085559084018b9055600284018890558554915190917f91aa418bfd26049fe46510fca1b7593f8348efbf8e8e29a3844bb16584ff14489161055191906109dc565b60405180910390a250505050949350505050565b600080610570610698565b600085815260208290526040902090915061058b90846106bc565b9150505b92915050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b7fe9264b9da64504fcbd8e41f0f0eb90a5e885b3fe366dad83c81095d9285d25e190565b6000806105e9836106d1565b9392505050565b6000806105e98361071e565b7faa97fdeef5de5607974189e6a2429d502dcc32b43d658c3c065d5ca083ee1fab90565b600061062a610698565b6000848152602082905260409020909150610645908361076a565b1561069357610652610373565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b505050565b7f6282190449f76f72a9f692e4d8619a03764b7253394788948e36a7a57ba4a00e90565b60006105e9836001600160a01b03841661077f565b600081604051602001808060200183815260200182810382526023815260200180610a4f60239139604001925050506040516020818303038152906040528051906020012090505b919050565b600081604051602001808060200183815260200182810382526027815260200180610a286027913960400192505050604051602081830303815290604052805190602001209050919050565b60006105e9836001600160a01b038416610797565b60009081526001919091016020526040902054151590565b60006107a3838361077f565b6107d95750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561058f565b50600061058f565b80356001600160a01b038116811461071957600080fd5b600082601f830112610808578081fd5b813561081b61081682610a09565b6109e5565b81815291506020808301908481018184028601820187101561083c57600080fd5b60005b8481101561085b5781358452928201929082019060010161083f565b505050505092915050565b60008060006060848603121561087a578283fd5b833567ffffffffffffffff80821115610891578485fd5b61089d878388016107f8565b94506020915081860135818111156108b3578485fd5b8601601f810188136108c3578485fd5b80356108d161081682610a09565b81815284810190838601868402850187018c10156108ed578889fd5b8894505b8385101561091657610902816107e1565b8352600194909401939186019186016108f1565b509650505050604086013591508082111561092f578283fd5b5061093c868287016107f8565b9150509250925092565b600060208284031215610957578081fd5b5035919050565b600080600060608486031215610972578283fd5b83359250610982602085016107e1565b9150604084013590509250925092565b6020808252600d908201526c1253959053125117d253941555609a1b604082015260600190565b6020808252600990820152681393d517d59053125160ba1b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715610a0157fe5b604052919050565b600067ffffffffffffffff821115610a1d57fe5b506020908102019056fe6469616d6f6e642e636f6e74726163742e6173736574706f6f6c2e7769746864726177706f6c6c6469616d6f6e642e636f6e74726163742e6173736574706f6f6c2e62617365706f6c6ca2646970667358221220274f098d7f15d3ec84066a44b8850d41baddea990d0b566ef897caee4981f0ec64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getProposeWithdrawPollDuration()": {
        "returns": {
          "_0": "default duration in seconds for polls for proposed withdrawals."
        }
      },
      "proposeBulkWithdraw(uint256[],address[],uint256[])": {
        "params": {
          "_amounts": "Sizes of the proposed withdrawal.",
          "_beneficiaries": "Beneficiaries of the reward.",
          "_unlockDates": "Dates beyond which it will be possible to withdraw"
        }
      },
      "proposeWithdraw(uint256,address,uint256)": {
        "params": {
          "_amount": "Size of the proposed withdrawal.",
          "_beneficiary": "Beneficiary of the reward.",
          "_unlockDate": "Date beyond which it will be possible to withdraw"
        }
      },
      "setProposeWithdrawPollDuration(uint256)": {
        "params": {
          "_duration": "Default duration of the poll for proposed withdrawals."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "proposeBulkWithdraw(uint256[],address[],uint256[])": {
        "notice": "Proposes a withdraw poll with the default withdrawPollDuration in bulk."
      },
      "proposeWithdraw(uint256,address,uint256)": {
        "notice": "Proposes a withdraw poll with the default withdrawPollDuration."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}